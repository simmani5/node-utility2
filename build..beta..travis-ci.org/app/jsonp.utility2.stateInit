window.utility2.stateInit({"utility2":{"assetsDict":{"/assets.example.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<!-- \"assets.utility2.template.html\" -->\n<title>utility2 (0.0.1)</title>\n<style>\n/* jslint utility2:true */\n/*csslint\n*/\n/* csslint ignore:start */\n*,\n*:after,\n*:before {\n    box-sizing: border-box;\n}\n.uiAnimateSlide {\n    overflow-y: hidden;\n    transition: max-height ease-in 250ms, min-height ease-in 250ms, padding-bottom ease-in 250ms, padding-top ease-in 250ms;\n}\n/* csslint ignore:end */\n@keyframes uiAnimateSpin {\n0% {\n    transform: rotate(0deg);\n}\n100% {\n    transform: rotate(360deg);\n}\n}\na {\n    overflow-wrap: break-word;\n}\nbody {\n    background: #f7f7f7;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: small;\n    margin: 0 40px;\n}\nbody > div,\nbody > input,\nbody > pre,\nbody > .button,\nbody > .textarea {\n    margin-bottom: 20px;\n    margin-top: 0;\n}\nbody > input,\nbody > .button {\n    width: 20rem;\n}\nbody > .readonly {\n    background: #ddd;\n}\nbody > .textarea {\n    height: 10rem;\n    resize: vertical;\n    width: 100%;\n}\ncode,\npre,\n.textarea {\n    font-family: Consolas, Menlo, monospace;\n    font-size: smaller;\n}\npre {\n    overflow-wrap: break-word;\n    white-space: pre-wrap;\n}\n.button {\n    background: #ddd;\n    border: 1px solid #999;\n    color: #000;\n    cursor: pointer;\n    display: inline-block;\n    padding: 2px 5px;\n    text-align: center;\n    text-decoration: none;\n}\n.button:hover {\n    background: #bbb;\n}\n.colorError {\n    color: #d00;\n}\n.textarea {\n    background: #fff;\n    border: 1px solid #999;\n    border-radius: 0;\n    cursor: auto;\n    overflow: auto;\n    padding: 2px;\n}\n.zeroPixel {\n    border: 0;\n    height: 0;\n    margin: 0;\n    padding: 0;\n    width: 0;\n}\n</style>\n</head>\n<body>\n<div class=\"uiAnimateSpin\" style=\"animation: uiAnimateSpin 2s linear infinite; border: 5px solid #999; border-radius: 50%; border-top: 5px solid #7d7; display: none; height: 25px; vertical-align: middle; width: 25px;\"></div>\n<script>\n/* jslint utility2:true */\n// init domOnEventWindowOnloadTimeElapsed\n(function () {\n/*\n * this function will measure and print time-elapsed for window.onload\n */\n    \"use strict\";\n    if (!(\n        typeof window === \"object\" && window && window.document\n        && typeof document.addEventListener === \"function\"\n    ) || window.domOnEventWindowOnloadTimeElapsed) {\n        return;\n    }\n    window.domOnEventWindowOnloadTimeElapsed = Date.now() + 100;\n    window.addEventListener(\"load\", function () {\n        setTimeout(function () {\n            window.domOnEventWindowOnloadTimeElapsed = (\n                Date.now()\n                - window.domOnEventWindowOnloadTimeElapsed\n            );\n            console.error(\n                \"domOnEventWindowOnloadTimeElapsed = \"\n                + window.domOnEventWindowOnloadTimeElapsed\n            );\n        }, 100);\n    });\n}());\n\n\n\n// init domOnEventAjaxProgressUpdate\n(function () {\n/*\n * this function will display incrementing ajax-progress-bar\n */\n    \"use strict\";\n    let opt;\n    let styleBar0;\n    let styleBar;\n    let styleModal0;\n    let styleModal;\n    let timeStart;\n    let timerInterval;\n    let timerTimeout;\n    let tmp;\n    let width;\n    try {\n        if (\n            window.domOnEventAjaxProgressUpdate\n            || !document.getElementById(\"domElementAjaxProgressBar1\").style\n        ) {\n            return;\n        }\n    } catch (ignore) {\n        return;\n    }\n    window.domOnEventAjaxProgressUpdate = function (gotoState, onError) {\n        gotoState = (gotoState | 0) + 1;\n        switch (gotoState) {\n        // ajaxProgress - show\n        case 1:\n            // init timerInterval and timerTimeout\n            if (!timerTimeout) {\n                timeStart = Date.now();\n                timerInterval = setInterval(opt, 2000, 1, onError);\n                timerTimeout = setTimeout(opt, opt.timeout, 2, onError);\n            }\n            // show ajaxProgressBar\n            if (width !== -1) {\n                styleBar.background = styleBar0.background;\n            }\n            setTimeout(opt, 50, gotoState, onError);\n            break;\n        // ajaxProgress - increment\n        case 2:\n            // show ajaxProgressBar\n            if (width === -1) {\n                break;\n            }\n            styleBar.background = styleBar0.background;\n            // reset ajaxProgress if it reaches end\n            if ((styleBar.width.slice(0, -1) | 0) > 95) {\n                width = 0;\n            }\n            // this algorithm will indefinitely increment ajaxProgress\n            // with successively smaller increments without reaching 100%\n            width += 1;\n            styleBar.width = Math.max(\n                100 - 75 * Math.exp(-0.125 * width),\n                styleBar.width.slice(0, -1) | 0\n            ) + \"%\";\n            // show ajaxProgressModal\n            styleModal.height = \"100%\";\n            styleModal.opacity = styleModal0.opacity;\n            if (!opt.cnt) {\n                setTimeout(opt, 0, gotoState, onError);\n            }\n            break;\n        // ajaxProgress - 100%\n        case 3:\n            width = -1;\n            styleBar.width = \"100%\";\n            setTimeout(opt, 1000, gotoState, onError);\n            break;\n        // ajaxProgress - hide\n        case 4:\n            // debug timeElapsed\n            tmp = Date.now();\n            console.error(\n                \"domOnEventAjaxProgressUpdate - timeElapsed - \"\n                + (tmp - timeStart)\n                + \" ms\"\n            );\n            // cleanup timerInterval and timerTimeout\n            timeStart = tmp;\n            clearInterval(timerInterval);\n            timerInterval = undefined;\n            clearTimeout(timerTimeout);\n            timerTimeout = undefined;\n            // hide ajaxProgressBar\n            styleBar.background = \"transparent\";\n            // hide ajaxProgressModal\n            styleModal.opacity = \"0\";\n            if (onError) {\n                onError();\n            }\n            setTimeout(opt, 250, gotoState);\n            break;\n        // ajaxProgress - reset\n        default:\n            opt.cnt = 0;\n            width = 0;\n            styleBar.width = \"0%\";\n            styleModal.height = \"0\";\n        }\n    };\n    opt = window.domOnEventAjaxProgressUpdate;\n    opt.end = function (onError) {\n        opt.cnt = 0;\n        window.domOnEventAjaxProgressUpdate(2, onError);\n    };\n    // init styleBar\n    styleBar = document.getElementById(\"domElementAjaxProgressBar1\").style;\n    styleBar0 = Object.assign({}, styleBar);\n    Object.entries({\n        background: \"#d00\",\n        height: \"2px\",\n        left: \"0\",\n        margin: \"0\",\n        padding: \"0\",\n        position: \"fixed\",\n        top: \"0\",\n        transition: \"background 250ms, width 750ms\",\n        width: \"0%\",\n        \"z-index\": \"1\"\n    }).forEach(function (entry) {\n        styleBar[entry[0]] = styleBar[entry[0]] || entry[1];\n    });\n    // init styleModal\n    styleModal = document.getElementById(\"domElementAjaxProgressModal1\") || {};\n    styleModal = styleModal.style || {};\n    styleModal0 = Object.assign({}, styleModal);\n    Object.entries({\n        height: \"0\",\n        left: \"0\",\n        margin: \"0\",\n        padding: \"0\",\n        position: \"fixed\",\n        top: \"0\",\n        transition: \"opacity 125ms\",\n        width: \"100%\",\n        \"z-index\": \"1\"\n    }).forEach(function (entry) {\n        styleModal[entry[0]] = styleModal[entry[0]] || entry[1];\n    });\n    // init state\n    width = 0;\n    opt.cnt = 0;\n    opt.timeout = 30000;\n    // init ajaxProgress\n    window.domOnEventAjaxProgressUpdate();\n}());\n\n\n\n// init domOnEventDelegateDict\n(function () {\n/*\n * this function will handle delegated dom-evt\n */\n    \"use strict\";\n    let debounce;\n    let timerTimeout;\n    debounce = function () {\n        return setTimeout(function () {\n            timerTimeout = undefined;\n        }, 30);\n    };\n    if (!(\n        typeof window === \"object\" && window && window.document\n        && typeof document.addEventListener === \"function\"\n    ) || window.domOnEventDelegateDict) {\n        return;\n    }\n    window.domOnEventDelegateDict = {};\n    window.domOnEventDelegateDict.domOnEventDelegate = function (evt) {\n        evt.targetOnEvent = evt.target.closest(\"[data-onevent]\");\n        if (\n            !evt.targetOnEvent\n            || evt.targetOnEvent.dataset.onevent === \"domOnEventNop\"\n            || evt.target.closest(\".disabled,.readonly\")\n        ) {\n            return;\n        }\n        // filter evt-change\n        switch (evt.type !== \"change\" && evt.target.type) {\n        case \"checkbox\":\n        case \"file\":\n        case \"select-one\":\n        case \"radio\":\n            return;\n        }\n        // filter evt-keyup\n        switch (evt.type) {\n        case \"keyup\":\n            if (!timerTimeout && (\n                evt.target.tagName === \"INPUT\"\n                || evt.target.tagName === \"TEXTAREA\"\n            )) {\n                timerTimeout = debounce();\n                if (evt.target.dataset.valueOld !== evt.target.value) {\n                    evt.target.dataset.valueOld = evt.target.value;\n                    break;\n                }\n            }\n            return;\n        }\n        switch (evt.targetOnEvent.tagName) {\n        case \"BUTTON\":\n        case \"FORM\":\n            evt.preventDefault();\n            break;\n        }\n        evt.stopPropagation();\n        // handle domOnEventClickTarget\n        if (evt.targetOnEvent.dataset.onevent === \"domOnEventClickTarget\") {\n            document.querySelector(\n                evt.targetOnEvent.dataset.clickTarget\n            ).click();\n            return;\n        }\n        window.domOnEventDelegateDict[evt.targetOnEvent.dataset.onevent](evt);\n    };\n    // handle evt\n    [\n        \"change\",\n        \"click\",\n        \"keyup\",\n        \"submit\"\n    ].forEach(function (eventType) {\n        document.addEventListener(\n            eventType,\n            window.domOnEventDelegateDict.domOnEventDelegate\n        );\n    });\n}());\n\n\n\n// init domOnEventSelectAllWithinPre\n(function () {\n/*\n * this function will limit select-all within <pre tabIndex=\"0\"> elem\n * https://stackoverflow.com/questions/985272/selecting-text-in-an-element-akin-to-highlighting-with-your-mouse\n */\n    \"use strict\";\n    if (!(\n        typeof window === \"object\" && window && window.document\n        && typeof document.addEventListener === \"function\"\n    ) || window.domOnEventSelectAllWithinPre) {\n        return;\n    }\n    window.domOnEventSelectAllWithinPre = function (evt) {\n        let range;\n        let selection;\n        if (\n            evt && (evt.ctrlKey || evt.metaKey) && evt.key === \"a\"\n            && evt.target.closest(\"pre\")\n        ) {\n            range = document.createRange();\n            range.selectNodeContents(evt.target.closest(\"pre\"));\n            selection = window.getSelection();\n            selection.removeAllRanges();\n            selection.addRange(range);\n            evt.preventDefault();\n        }\n    };\n    // handle evt\n    document.addEventListener(\n        \"keydown\",\n        window.domOnEventSelectAllWithinPre\n    );\n}());\n</script>\n<h1>\n<!-- utility2-comment\n<a\n    {{#if env.npm_package_homepage}}\n    href=\"{{env.npm_package_homepage}}\"\n    {{/if env.npm_package_homepage}}\n    target=\"_blank\"\n>\nutility2-comment -->\n    utility2 (0.0.1)\n<!-- utility2-comment\n</a>\nutility2-comment -->\n</h1>\n<h3>the greatest app in the world!</h3>\n<!-- utility2-comment\n<a class=\"button\" download href=\"assets.app.js\">download standalone app</a><br>\n<button class=\"button\" data-onevent=\"testRunBrowser\" id=\"buttonTestRun1\">run browser-tests</button><br>\n<div class=\"uiAnimateSlide\" id=\"htmlTestReport1\" style=\"border-bottom: 0; border-top: 0; margin-bottom: 0; margin-top: 0; max-height: 0; padding-bottom: 0; padding-top: 0;\"></div>\nutility2-comment -->\n\n\n\n<!-- custom-html-start -->\n<label>edit or paste script below to cover and test</label>\n<textarea class=\"textarea\" data-onevent=\"domOnEventInputChange\" id=\"inputTextarea1\">\n// remove comment below to disable jslint\n/*jslint browser, devel*/\n/*global window*/\n(function () {\n    \"use strict\";\n    var testCaseDict;\n    testCaseDict = {};\n    testCaseDict.modeTest = 1;\n\n    // comment this testCase to disable failed error demo\n    testCaseDict.testCase_failed_error_demo = function (opt, onError) {\n    /*\n     * this function will run a failed error demo\n     */\n        // hack-jslint\n        window.utility2.nop(opt);\n        onError(new Error(\"this is a failed error demo\"));\n    };\n\n    testCaseDict.testCase_passed_ajax_demo = function (opt, onError) {\n    /*\n     * this function will demo a passed ajax test\n     */\n        var data;\n        opt = {url: \"/\"};\n        // test ajax-req for main-page \"/\"\n        window.utility2.ajax(opt, function (err, xhr) {\n            try {\n                // handle err\n                console.assert(!err, err);\n                // validate \"200 ok\" status\n                console.assert(xhr.statusCode === 200, xhr.statusCode);\n                // validate non-empty data\n                data = xhr.responseText;\n                console.assert(data && data.length > 0, data);\n                onError();\n            } catch (errCaught) {\n                onError(errCaught);\n            }\n        });\n    };\n\n    window.utility2.testRunDefault(testCaseDict);\n}());\n</textarea>\n<button class=\"button\" data-onevent=\"domOnEventInputChange\" id=\"buttonJslintAutofix1\">jslint autofix</button><br>\n<pre class= \"colorError\" id=\"outputJslintPre1\" tabindex=\"0\"></pre>\n<label>instrumented-code</label>\n<textarea class=\"readonly textarea\" id=\"outputTextarea1\" readonly tabindex=\"0\"></textarea>\n<label>stderr and stdout</label>\n<textarea class=\"onevent-reset-output readonly textarea\" id=\"outputStdout1\" readonly></textarea>\n<div id=\"htmlTestReport2\"></div>\n<div id=\"htmlCoverageReport1\"></div>\n<script>\n/* jslint utility2:true */\nwindow.addEventListener(\"load\", function (local) {\n\"use strict\";\nlocal = window.utility2;\ndocument.querySelectorAll(\n    \"#buttonTestRun1, #htmlTestReport1\"\n).forEach(function (elem) {\n    elem.style.display = \"none\";\n});\nlocal.domOnEventInputChange = function (evt) {\n    switch (evt.type + \".\" + evt.target.id) {\n    case \"click.buttonJslintAutofix1\":\n    case \"keyup.inputTextarea1\":\n        // jslint #inputTextarea1\n        local.jslintAndPrint(document.querySelector(\n            \"#inputTextarea1\"\n        ).value, \"inputTextarea1.js\", {\n            autofix: evt.target.id === \"buttonJslintAutofix1\",\n            conditional: evt.target.id !== \"buttonJslintAutofix1\"\n        });\n        if (local.jslint.jslintResult.autofix) {\n            document.querySelector(\n                \"#inputTextarea1\"\n            ).value = local.jslint.jslintResult.code;\n        }\n        document.querySelector(\n            \"#outputJslintPre1\"\n        ).textContent = local.jslint.jslintResult.errMsg.replace((\n            /\\u001b\\[\\d*m/g\n        ), \"\").trim();\n        // try to cleanup __coverage__\n        try {\n            delete globalThis.__coverage__[\"/inputTextarea1.js\"];\n        } catch (ignore) {}\n        // try to cover and eval #inputTextarea1\n        try {\n            document.querySelector(\n                \"#outputTextarea1\"\n            ).value = local.istanbul.instrumentSync(\n                document.querySelector(\"#inputTextarea1\").value,\n                \"/inputTextarea1.js\"\n            );\n            eval( // jslint ignore:line\n                document.querySelector(\"#outputTextarea1\").value\n            );\n        } catch (errCaught) {\n            console.error(errCaught);\n        }\n        break;\n    }\n};\n// handle evt\nlocal.on(\"utility2.testRunEnd\", function () {\n    document.querySelector(\n        \"#htmlCoverageReport1\"\n    ).innerHTML = local.istanbul.coverageReportCreate({\n        coverage: globalThis.__coverage__\n    });\n});\nlocal.on(\"utility2.testRunProgressUpdate\", function (testReport) {\n    document.querySelector(\n        \"#htmlTestReport2\"\n    ).innerHTML = local.testReportMerge(testReport, {});\n});\nlocal.domOnEventInputChange({\n    target: {\n        id: \"inputTextarea1\"\n    },\n    type: \"keyup\"\n});\n});\n</script>\n<!-- custom-html-end -->\n\n\n\n<!-- utility2-comment\n{{#if isRollup}}\n<script src=\"assets.app.js\"></script>\n{{#unless isRollup}}\nutility2-comment -->\n<script src=\"assets.utility2.lib.istanbul.js\"></script>\n<script src=\"assets.utility2.lib.jslint.js\"></script>\n<script src=\"assets.utility2.lib.marked.js\"></script>\n<script src=\"assets.utility2.js\"></script>\n<script>window.utility2_onReadyBefore.cnt += 1;</script>\n<script src=\"jsonp.utility2.stateInit?callback=window.utility2.stateInit\"></script>\n<script src=\"assets.example.js\"></script>\n<script src=\"assets.test.js\"></script>\n<script>\nif (window.utility2_onReadyBefore) {\n    window.utility2_onReadyBefore();\n}\n</script>\n<!-- utility2-comment\n{{/if isRollup}}\nutility2-comment -->\n<div style=\"text-align: center;\">\n    [\n    this app was created with\n    <a\n        href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\"\n    >utility2</a>\n    ]\n</div>\n</body>\n</html>\n","/assets.example.js":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nexample.js\n\nthis script will demo automated browser-tests with coverage\n(via puppeteer and istanbul)\n\ninstruction\n    1. save this script as example.js\n    2. run the shell-command:\n        $ npm install utility2 && \\\n            PATH=\"$(pwd)/node_modules/.bin:$PATH\" \\\n            PORT=8081 \\\n            npm_config_mode_coverage=utility2 \\\n            node_modules/.bin/utility2 test example.js\n    3. view test-report in ./tmp/build/test-report.html\n    4. view coverage in ./tmp/build/coverage.html/index.html\n*/\n\n\n\n/* istanbul instrument in package utility2 */\n// assets.utility2.header.js - start\n/* jslint utility2:true */\n/* istanbul ignore next */\n(function (globalThis) {\n    \"use strict\";\n    let consoleError;\n    let debugName;\n    let local;\n    debugName = \"debug\" + String(\"Inline\");\n    // init globalThis\n    globalThis.globalThis = globalThis.globalThis || globalThis;\n    // init debug_inline\n    if (!globalThis[debugName]) {\n        consoleError = console.error;\n        globalThis[debugName] = function (...argList) {\n        /*\n         * this function will both print <argList> to stderr\n         * and return <argList>[0]\n         */\n            consoleError(\"\\n\\n\" + debugName);\n            consoleError(...argList);\n            consoleError(\"\\n\");\n            return argList[0];\n        };\n    }\n    String.prototype.trimEnd = (\n        String.prototype.trimEnd || String.prototype.trimRight\n    );\n    String.prototype.trimStart = (\n        String.prototype.trimStart || String.prototype.trimLeft\n    );\n    // init local\n    local = {};\n    local.local = local;\n    globalThis.globalLocal = local;\n    // init isBrowser\n    local.isBrowser = (\n        typeof globalThis.XMLHttpRequest === \"function\"\n        && globalThis.navigator\n        && typeof globalThis.navigator.userAgent === \"string\"\n    );\n    // init isWebWorker\n    local.isWebWorker = (\n        local.isBrowser && typeof globalThis.importScripts === \"function\"\n    );\n    // init function\n    local.assertOrThrow = function (passed, msg) {\n    /*\n     * this function will throw err.<msg> if <passed> is falsy\n     */\n        if (passed) {\n            return;\n        }\n        throw (\n            (\n                msg\n                && typeof msg.message === \"string\"\n                && typeof msg.stack === \"string\"\n            )\n            // if msg is err, then leave as is\n            ? msg\n            : new Error(\n                typeof msg === \"string\"\n                // if msg is a string, then leave as is\n                ? msg\n                // else JSON.stringify msg\n                : JSON.stringify(msg, undefined, 4)\n            )\n        );\n    };\n    local.coalesce = function (...argList) {\n    /*\n     * this function will coalesce null, undefined, or \"\" in <argList>\n     */\n        let arg;\n        let ii;\n        ii = 0;\n        while (ii < argList.length) {\n            arg = argList[ii];\n            if (arg !== null && arg !== undefined && arg !== \"\") {\n                break;\n            }\n            ii += 1;\n        }\n        return arg;\n    };\n    local.fsReadFileOrDefaultSync = function (pathname, type, dflt) {\n    /*\n     * this function will sync-read <pathname> with given <type> and <dflt>\n     */\n        let fs;\n        // do nothing if module does not exist\n        try {\n            fs = require(\"fs\");\n        } catch (ignore) {\n            return dflt;\n        }\n        pathname = require(\"path\").resolve(pathname);\n        // try to read pathname\n        try {\n            return (\n                type === \"json\"\n                ? JSON.parse(fs.readFileSync(pathname, \"utf8\"))\n                : fs.readFileSync(pathname, type)\n            );\n        } catch (ignore) {\n            return dflt;\n        }\n    };\n    local.fsRmrfSync = function (pathname) {\n    /*\n     * this function will sync \"rm -rf\" <pathname>\n     */\n        let child_process;\n        // do nothing if module does not exist\n        try {\n            child_process = require(\"child_process\");\n        } catch (ignore) {\n            return;\n        }\n        pathname = require(\"path\").resolve(pathname);\n        if (process.platform !== \"win32\") {\n            child_process.spawnSync(\"rm\", [\n                \"-rf\", pathname\n            ], {\n                stdio: [\n                    \"ignore\", 1, 2\n                ]\n            });\n            return;\n        }\n        try {\n            child_process.spawnSync(\"rd\", [\n                \"/s\", \"/q\", pathname\n            ], {\n                stdio: [\n                    \"ignore\", 1, \"ignore\"\n                ]\n            });\n        } catch (ignore) {}\n    };\n    local.fsWriteFileWithMkdirpSync = function (pathname, data, msg) {\n    /*\n     * this function will sync write <data> to <pathname> with \"mkdir -p\"\n     */\n        let fs;\n        let success;\n        // do nothing if module does not exist\n        try {\n            fs = require(\"fs\");\n        } catch (ignore) {\n            return;\n        }\n        pathname = require(\"path\").resolve(pathname);\n        // try to write pathname\n        try {\n            fs.writeFileSync(pathname, data);\n            success = true;\n        } catch (ignore) {\n            // mkdir -p\n            fs.mkdirSync(require(\"path\").dirname(pathname), {\n                recursive: true\n            });\n            // re-write pathname\n            fs.writeFileSync(pathname, data);\n            success = true;\n        }\n        if (success && msg) {\n            console.error(msg.replace(\"{{pathname}}\", pathname));\n        }\n        return success;\n    };\n    local.identity = function (val) {\n    /*\n     * this function will return <val>\n     */\n        return val;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    local.objectAssignDefault = function (tgt = {}, src = {}, depth = 0) {\n    /*\n     * this function will if items from <tgt> are null, undefined, or \"\",\n     * then overwrite them with items from <src>\n     */\n        let recurse;\n        recurse = function (tgt, src, depth) {\n            Object.entries(src).forEach(function ([\n                key, bb\n            ]) {\n                let aa;\n                aa = tgt[key];\n                if (aa === undefined || aa === null || aa === \"\") {\n                    tgt[key] = bb;\n                    return;\n                }\n                if (\n                    depth !== 0\n                    && typeof aa === \"object\" && aa && !Array.isArray(aa)\n                    && typeof bb === \"object\" && bb && !Array.isArray(bb)\n                ) {\n                    recurse(aa, bb, depth - 1);\n                }\n            });\n        };\n        recurse(tgt, src, depth | 0);\n        return tgt;\n    };\n    // require builtin\n    if (!local.isBrowser) {\n        local.assert = require(\"assert\");\n        local.buffer = require(\"buffer\");\n        local.child_process = require(\"child_process\");\n        local.cluster = require(\"cluster\");\n        local.crypto = require(\"crypto\");\n        local.dgram = require(\"dgram\");\n        local.dns = require(\"dns\");\n        local.domain = require(\"domain\");\n        local.events = require(\"events\");\n        local.fs = require(\"fs\");\n        local.http = require(\"http\");\n        local.https = require(\"https\");\n        local.net = require(\"net\");\n        local.os = require(\"os\");\n        local.path = require(\"path\");\n        local.querystring = require(\"querystring\");\n        local.readline = require(\"readline\");\n        local.repl = require(\"repl\");\n        local.stream = require(\"stream\");\n        local.string_decoder = require(\"string_decoder\");\n        local.timers = require(\"timers\");\n        local.tls = require(\"tls\");\n        local.tty = require(\"tty\");\n        local.url = require(\"url\");\n        local.util = require(\"util\");\n        local.vm = require(\"vm\");\n        local.zlib = require(\"zlib\");\n    }\n}((typeof globalThis === \"object\" && globalThis) || window));\n// assets.utility2.header.js - end\n\n\n\n/* jslint utility2:true */\n(function (local) {\n\"use strict\";\n\n\n\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (\n    globalThis.utility2_rollup\n    || globalThis.utility2_utility2\n    || globalThis.utility2_moduleExports\n);\n// init exports\nglobalThis.local = local;\n// run test-server\nlocal.testRunServer(local);\n// init assets\nlocal.assetsDict[\"/assets.hello.txt\"] = \"hello \\ud83d\\ude01\\n\";\nlocal.assetsDict[\"/assets.index.template.html\"] = \"\";\n}());\n\n\n\n// run shared js-env code - function\n(function () {\nlocal.testCase_ajax_200 = function (opt, onError) {\n/*\n * this function will test ajax's \"200 ok\" handling-behavior\n */\n    if (!local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    opt = {};\n    // test ajax-path \"assets.hello.txt\"\n    local.ajax({\n        url: \"assets.hello.txt\"\n    }, function (err, xhr) {\n        local.tryCatchOnError(function () {\n            // handle err\n            local.assertOrThrow(!err, err);\n            // validate data\n            opt.data = xhr.responseText;\n            local.assertOrThrow(\n                opt.data === \"hello \\ud83d\\ude01\\n\",\n                opt.data\n            );\n            onError();\n        }, onError);\n    });\n};\n\nlocal.testCase_ajax_404 = function (opt, onError) {\n/*\n * this function will test ajax's \"404 not found\" handling-behavior\n */\n    if (!local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    opt = {};\n    // test ajax-path \"/undefined\"\n    local.ajax({\n        url: \"/undefined\"\n    }, function (err) {\n        local.tryCatchOnError(function () {\n            // handle err\n            local.assertOrThrow(err, err);\n            opt.statusCode = err.statusCode;\n            // validate 404 http statusCode\n            local.assertOrThrow(opt.statusCode === 404, opt.statusCode);\n            onError();\n        }, onError);\n    });\n};\n\nlocal.testCase_webpage_default = function (opt, onError) {\n/*\n * this function will test webpage's default handling-behavior\n */\n    if (local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    opt = {\n        url: local.serverLocalHost + \"?modeTest=1\"\n    };\n    local.browserTest(opt, onError);\n};\n}());\n\n\n\n// run browser js-env code - init-test\n/* istanbul ignore next */\n(function () {\nif (!local.isBrowser) {\n    return;\n}\n// log stderr and stdout to #outputStdout1\n[\"error\", \"log\"].forEach(function (key) {\n    let elem;\n    let fnc;\n    elem = document.querySelector(\"#outputStdout1\");\n    if (!elem) {\n        return;\n    }\n    fnc = console[key];\n    console[key] = function (...argList) {\n        fnc(...argList);\n        // append text to #outputStdout1\n        elem.textContent += argList.map(function (arg) {\n            return (\n                typeof arg === \"string\"\n                ? arg\n                : JSON.stringify(arg, undefined, 4)\n            );\n        }).join(\" \").replace((\n            /\\u001b\\[\\d*m/g\n        ), \"\") + \"\\n\";\n        // scroll textarea to bottom\n        elem.scrollTop = elem.scrollHeight;\n    };\n});\nlocal.objectAssignDefault(local, globalThis.domOnEventDelegateDict);\nglobalThis.domOnEventDelegateDict = local;\n}());\n\n\n\n// run node js-env code - init-test\n/* istanbul ignore next */\n(function () {\nif (local.isBrowser) {\n    return;\n}\n// init exports\nmodule.exports = local;\n// init assetsDict\nlocal.assetsDict = local.assetsDict || {};\n/* jslint ignore:start */\nlocal.assetsDict[\"/assets.index.template.html\"] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"utf-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<!-- \"assets.utility2.template.html\" -->\\n\\\n<title>{{env.npm_package_name}} ({{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/* jslint utility2:true */\\n\\\n/*csslint\\n\\\n*/\\n\\\n/* csslint ignore:start */\\n\\\n*,\\n\\\n*:after,\\n\\\n*:before {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\n.uiAnimateSlide {\\n\\\n    overflow-y: hidden;\\n\\\n    transition: max-height ease-in 250ms, min-height ease-in 250ms, padding-bottom ease-in 250ms, padding-top ease-in 250ms;\\n\\\n}\\n\\\n/* csslint ignore:end */\\n\\\n@keyframes uiAnimateSpin {\\n\\\n0% {\\n\\\n    transform: rotate(0deg);\\n\\\n}\\n\\\n100% {\\n\\\n    transform: rotate(360deg);\\n\\\n}\\n\\\n}\\n\\\na {\\n\\\n    overflow-wrap: break-word;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #f7f7f7;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    font-size: small;\\n\\\n    margin: 0 40px;\\n\\\n}\\n\\\nbody > div,\\n\\\nbody > input,\\n\\\nbody > pre,\\n\\\nbody > .button,\\n\\\nbody > .textarea {\\n\\\n    margin-bottom: 20px;\\n\\\n    margin-top: 0;\\n\\\n}\\n\\\nbody > input,\\n\\\nbody > .button {\\n\\\n    width: 20rem;\\n\\\n}\\n\\\nbody > .readonly {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\nbody > .textarea {\\n\\\n    height: 10rem;\\n\\\n    resize: vertical;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ncode,\\n\\\npre,\\n\\\n.textarea {\\n\\\n    font-family: Consolas, Menlo, monospace;\\n\\\n    font-size: smaller;\\n\\\n}\\n\\\npre {\\n\\\n    overflow-wrap: break-word;\\n\\\n    white-space: pre-wrap;\\n\\\n}\\n\\\n.button {\\n\\\n    background: #ddd;\\n\\\n    border: 1px solid #999;\\n\\\n    color: #000;\\n\\\n    cursor: pointer;\\n\\\n    display: inline-block;\\n\\\n    padding: 2px 5px;\\n\\\n    text-align: center;\\n\\\n    text-decoration: none;\\n\\\n}\\n\\\n.button:hover {\\n\\\n    background: #bbb;\\n\\\n}\\n\\\n.colorError {\\n\\\n    color: #d00;\\n\\\n}\\n\\\n.textarea {\\n\\\n    background: #fff;\\n\\\n    border: 1px solid #999;\\n\\\n    border-radius: 0;\\n\\\n    cursor: auto;\\n\\\n    overflow: auto;\\n\\\n    padding: 2px;\\n\\\n}\\n\\\n.zeroPixel {\\n\\\n    border: 0;\\n\\\n    height: 0;\\n\\\n    margin: 0;\\n\\\n    padding: 0;\\n\\\n    width: 0;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<div class=\"uiAnimateSpin\" style=\"animation: uiAnimateSpin 2s linear infinite; border: 5px solid #999; border-radius: 50%; border-top: 5px solid #7d7; display: none; height: 25px; vertical-align: middle; width: 25px;\"></div>\\n\\\n<script>\\n\\\n/* jslint utility2:true */\\n\\\n// init domOnEventWindowOnloadTimeElapsed\\n\\\n(function () {\\n\\\n/*\\n\\\n * this function will measure and print time-elapsed for window.onload\\n\\\n */\\n\\\n    \"use strict\";\\n\\\n    if (!(\\n\\\n        typeof window === \"object\" && window && window.document\\n\\\n        && typeof document.addEventListener === \"function\"\\n\\\n    ) || window.domOnEventWindowOnloadTimeElapsed) {\\n\\\n        return;\\n\\\n    }\\n\\\n    window.domOnEventWindowOnloadTimeElapsed = Date.now() + 100;\\n\\\n    window.addEventListener(\"load\", function () {\\n\\\n        setTimeout(function () {\\n\\\n            window.domOnEventWindowOnloadTimeElapsed = (\\n\\\n                Date.now()\\n\\\n                - window.domOnEventWindowOnloadTimeElapsed\\n\\\n            );\\n\\\n            console.error(\\n\\\n                \"domOnEventWindowOnloadTimeElapsed = \"\\n\\\n                + window.domOnEventWindowOnloadTimeElapsed\\n\\\n            );\\n\\\n        }, 100);\\n\\\n    });\\n\\\n}());\\n\\\n\\n\\\n\\n\\\n\\n\\\n// init domOnEventAjaxProgressUpdate\\n\\\n(function () {\\n\\\n/*\\n\\\n * this function will display incrementing ajax-progress-bar\\n\\\n */\\n\\\n    \"use strict\";\\n\\\n    let opt;\\n\\\n    let styleBar0;\\n\\\n    let styleBar;\\n\\\n    let styleModal0;\\n\\\n    let styleModal;\\n\\\n    let timeStart;\\n\\\n    let timerInterval;\\n\\\n    let timerTimeout;\\n\\\n    let tmp;\\n\\\n    let width;\\n\\\n    try {\\n\\\n        if (\\n\\\n            window.domOnEventAjaxProgressUpdate\\n\\\n            || !document.getElementById(\"domElementAjaxProgressBar1\").style\\n\\\n        ) {\\n\\\n            return;\\n\\\n        }\\n\\\n    } catch (ignore) {\\n\\\n        return;\\n\\\n    }\\n\\\n    window.domOnEventAjaxProgressUpdate = function (gotoState, onError) {\\n\\\n        gotoState = (gotoState | 0) + 1;\\n\\\n        switch (gotoState) {\\n\\\n        // ajaxProgress - show\\n\\\n        case 1:\\n\\\n            // init timerInterval and timerTimeout\\n\\\n            if (!timerTimeout) {\\n\\\n                timeStart = Date.now();\\n\\\n                timerInterval = setInterval(opt, 2000, 1, onError);\\n\\\n                timerTimeout = setTimeout(opt, opt.timeout, 2, onError);\\n\\\n            }\\n\\\n            // show ajaxProgressBar\\n\\\n            if (width !== -1) {\\n\\\n                styleBar.background = styleBar0.background;\\n\\\n            }\\n\\\n            setTimeout(opt, 50, gotoState, onError);\\n\\\n            break;\\n\\\n        // ajaxProgress - increment\\n\\\n        case 2:\\n\\\n            // show ajaxProgressBar\\n\\\n            if (width === -1) {\\n\\\n                break;\\n\\\n            }\\n\\\n            styleBar.background = styleBar0.background;\\n\\\n            // reset ajaxProgress if it reaches end\\n\\\n            if ((styleBar.width.slice(0, -1) | 0) > 95) {\\n\\\n                width = 0;\\n\\\n            }\\n\\\n            // this algorithm will indefinitely increment ajaxProgress\\n\\\n            // with successively smaller increments without reaching 100%\\n\\\n            width += 1;\\n\\\n            styleBar.width = Math.max(\\n\\\n                100 - 75 * Math.exp(-0.125 * width),\\n\\\n                styleBar.width.slice(0, -1) | 0\\n\\\n            ) + \"%\";\\n\\\n            // show ajaxProgressModal\\n\\\n            styleModal.height = \"100%\";\\n\\\n            styleModal.opacity = styleModal0.opacity;\\n\\\n            if (!opt.cnt) {\\n\\\n                setTimeout(opt, 0, gotoState, onError);\\n\\\n            }\\n\\\n            break;\\n\\\n        // ajaxProgress - 100%\\n\\\n        case 3:\\n\\\n            width = -1;\\n\\\n            styleBar.width = \"100%\";\\n\\\n            setTimeout(opt, 1000, gotoState, onError);\\n\\\n            break;\\n\\\n        // ajaxProgress - hide\\n\\\n        case 4:\\n\\\n            // debug timeElapsed\\n\\\n            tmp = Date.now();\\n\\\n            console.error(\\n\\\n                \"domOnEventAjaxProgressUpdate - timeElapsed - \"\\n\\\n                + (tmp - timeStart)\\n\\\n                + \" ms\"\\n\\\n            );\\n\\\n            // cleanup timerInterval and timerTimeout\\n\\\n            timeStart = tmp;\\n\\\n            clearInterval(timerInterval);\\n\\\n            timerInterval = undefined;\\n\\\n            clearTimeout(timerTimeout);\\n\\\n            timerTimeout = undefined;\\n\\\n            // hide ajaxProgressBar\\n\\\n            styleBar.background = \"transparent\";\\n\\\n            // hide ajaxProgressModal\\n\\\n            styleModal.opacity = \"0\";\\n\\\n            if (onError) {\\n\\\n                onError();\\n\\\n            }\\n\\\n            setTimeout(opt, 250, gotoState);\\n\\\n            break;\\n\\\n        // ajaxProgress - reset\\n\\\n        default:\\n\\\n            opt.cnt = 0;\\n\\\n            width = 0;\\n\\\n            styleBar.width = \"0%\";\\n\\\n            styleModal.height = \"0\";\\n\\\n        }\\n\\\n    };\\n\\\n    opt = window.domOnEventAjaxProgressUpdate;\\n\\\n    opt.end = function (onError) {\\n\\\n        opt.cnt = 0;\\n\\\n        window.domOnEventAjaxProgressUpdate(2, onError);\\n\\\n    };\\n\\\n    // init styleBar\\n\\\n    styleBar = document.getElementById(\"domElementAjaxProgressBar1\").style;\\n\\\n    styleBar0 = Object.assign({}, styleBar);\\n\\\n    Object.entries({\\n\\\n        background: \"#d00\",\\n\\\n        height: \"2px\",\\n\\\n        left: \"0\",\\n\\\n        margin: \"0\",\\n\\\n        padding: \"0\",\\n\\\n        position: \"fixed\",\\n\\\n        top: \"0\",\\n\\\n        transition: \"background 250ms, width 750ms\",\\n\\\n        width: \"0%\",\\n\\\n        \"z-index\": \"1\"\\n\\\n    }).forEach(function (entry) {\\n\\\n        styleBar[entry[0]] = styleBar[entry[0]] || entry[1];\\n\\\n    });\\n\\\n    // init styleModal\\n\\\n    styleModal = document.getElementById(\"domElementAjaxProgressModal1\") || {};\\n\\\n    styleModal = styleModal.style || {};\\n\\\n    styleModal0 = Object.assign({}, styleModal);\\n\\\n    Object.entries({\\n\\\n        height: \"0\",\\n\\\n        left: \"0\",\\n\\\n        margin: \"0\",\\n\\\n        padding: \"0\",\\n\\\n        position: \"fixed\",\\n\\\n        top: \"0\",\\n\\\n        transition: \"opacity 125ms\",\\n\\\n        width: \"100%\",\\n\\\n        \"z-index\": \"1\"\\n\\\n    }).forEach(function (entry) {\\n\\\n        styleModal[entry[0]] = styleModal[entry[0]] || entry[1];\\n\\\n    });\\n\\\n    // init state\\n\\\n    width = 0;\\n\\\n    opt.cnt = 0;\\n\\\n    opt.timeout = 30000;\\n\\\n    // init ajaxProgress\\n\\\n    window.domOnEventAjaxProgressUpdate();\\n\\\n}());\\n\\\n\\n\\\n\\n\\\n\\n\\\n// init domOnEventDelegateDict\\n\\\n(function () {\\n\\\n/*\\n\\\n * this function will handle delegated dom-evt\\n\\\n */\\n\\\n    \"use strict\";\\n\\\n    let debounce;\\n\\\n    let timerTimeout;\\n\\\n    debounce = function () {\\n\\\n        return setTimeout(function () {\\n\\\n            timerTimeout = undefined;\\n\\\n        }, 30);\\n\\\n    };\\n\\\n    if (!(\\n\\\n        typeof window === \"object\" && window && window.document\\n\\\n        && typeof document.addEventListener === \"function\"\\n\\\n    ) || window.domOnEventDelegateDict) {\\n\\\n        return;\\n\\\n    }\\n\\\n    window.domOnEventDelegateDict = {};\\n\\\n    window.domOnEventDelegateDict.domOnEventDelegate = function (evt) {\\n\\\n        evt.targetOnEvent = evt.target.closest(\"[data-onevent]\");\\n\\\n        if (\\n\\\n            !evt.targetOnEvent\\n\\\n            || evt.targetOnEvent.dataset.onevent === \"domOnEventNop\"\\n\\\n            || evt.target.closest(\".disabled,.readonly\")\\n\\\n        ) {\\n\\\n            return;\\n\\\n        }\\n\\\n        // filter evt-change\\n\\\n        switch (evt.type !== \"change\" && evt.target.type) {\\n\\\n        case \"checkbox\":\\n\\\n        case \"file\":\\n\\\n        case \"select-one\":\\n\\\n        case \"radio\":\\n\\\n            return;\\n\\\n        }\\n\\\n        // filter evt-keyup\\n\\\n        switch (evt.type) {\\n\\\n        case \"keyup\":\\n\\\n            if (!timerTimeout && (\\n\\\n                evt.target.tagName === \"INPUT\"\\n\\\n                || evt.target.tagName === \"TEXTAREA\"\\n\\\n            )) {\\n\\\n                timerTimeout = debounce();\\n\\\n                if (evt.target.dataset.valueOld !== evt.target.value) {\\n\\\n                    evt.target.dataset.valueOld = evt.target.value;\\n\\\n                    break;\\n\\\n                }\\n\\\n            }\\n\\\n            return;\\n\\\n        }\\n\\\n        switch (evt.targetOnEvent.tagName) {\\n\\\n        case \"BUTTON\":\\n\\\n        case \"FORM\":\\n\\\n            evt.preventDefault();\\n\\\n            break;\\n\\\n        }\\n\\\n        evt.stopPropagation();\\n\\\n        // handle domOnEventClickTarget\\n\\\n        if (evt.targetOnEvent.dataset.onevent === \"domOnEventClickTarget\") {\\n\\\n            document.querySelector(\\n\\\n                evt.targetOnEvent.dataset.clickTarget\\n\\\n            ).click();\\n\\\n            return;\\n\\\n        }\\n\\\n        window.domOnEventDelegateDict[evt.targetOnEvent.dataset.onevent](evt);\\n\\\n    };\\n\\\n    // handle evt\\n\\\n    [\\n\\\n        \"change\",\\n\\\n        \"click\",\\n\\\n        \"keyup\",\\n\\\n        \"submit\"\\n\\\n    ].forEach(function (eventType) {\\n\\\n        document.addEventListener(\\n\\\n            eventType,\\n\\\n            window.domOnEventDelegateDict.domOnEventDelegate\\n\\\n        );\\n\\\n    });\\n\\\n}());\\n\\\n\\n\\\n\\n\\\n\\n\\\n// init domOnEventSelectAllWithinPre\\n\\\n(function () {\\n\\\n/*\\n\\\n * this function will limit select-all within <pre tabIndex=\"0\"> elem\\n\\\n * https://stackoverflow.com/questions/985272/selecting-text-in-an-element-akin-to-highlighting-with-your-mouse\\n\\\n */\\n\\\n    \"use strict\";\\n\\\n    if (!(\\n\\\n        typeof window === \"object\" && window && window.document\\n\\\n        && typeof document.addEventListener === \"function\"\\n\\\n    ) || window.domOnEventSelectAllWithinPre) {\\n\\\n        return;\\n\\\n    }\\n\\\n    window.domOnEventSelectAllWithinPre = function (evt) {\\n\\\n        let range;\\n\\\n        let selection;\\n\\\n        if (\\n\\\n            evt && (evt.ctrlKey || evt.metaKey) && evt.key === \"a\"\\n\\\n            && evt.target.closest(\"pre\")\\n\\\n        ) {\\n\\\n            range = document.createRange();\\n\\\n            range.selectNodeContents(evt.target.closest(\"pre\"));\\n\\\n            selection = window.getSelection();\\n\\\n            selection.removeAllRanges();\\n\\\n            selection.addRange(range);\\n\\\n            evt.preventDefault();\\n\\\n        }\\n\\\n    };\\n\\\n    // handle evt\\n\\\n    document.addEventListener(\\n\\\n        \"keydown\",\\n\\\n        window.domOnEventSelectAllWithinPre\\n\\\n    );\\n\\\n}());\\n\\\n</script>\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n<a\\n\\\n    {{#if env.npm_package_homepage}}\\n\\\n    href=\"{{env.npm_package_homepage}}\"\\n\\\n    {{/if env.npm_package_homepage}}\\n\\\n    target=\"_blank\"\\n\\\n>\\n\\\nutility2-comment -->\\n\\\n    {{env.npm_package_name}} ({{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n</a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<a class=\"button\" download href=\"assets.app.js\">download standalone app</a><br>\\n\\\n<button class=\"button\" data-onevent=\"testRunBrowser\" id=\"buttonTestRun1\">run browser-tests</button><br>\\n\\\n<div class=\"uiAnimateSlide\" id=\"htmlTestReport1\" style=\"border-bottom: 0; border-top: 0; margin-bottom: 0; margin-top: 0; max-height: 0; padding-bottom: 0; padding-top: 0;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<!-- custom-html-start -->\\n\\\n<label>edit or paste script below to cover and test</label>\\n\\\n<textarea class=\"textarea\" data-onevent=\"domOnEventInputChange\" id=\"inputTextarea1\">\\n\\\n// remove comment below to disable jslint\\n\\\n/*jslint browser, devel*/\\n\\\n/*global window*/\\n\\\n(function () {\\n\\\n    \"use strict\";\\n\\\n    var testCaseDict;\\n\\\n    testCaseDict = {};\\n\\\n    testCaseDict.modeTest = 1;\\n\\\n\\n\\\n    // comment this testCase to disable failed error demo\\n\\\n    testCaseDict.testCase_failed_error_demo = function (opt, onError) {\\n\\\n    /*\\n\\\n     * this function will run a failed error demo\\n\\\n     */\\n\\\n        // hack-jslint\\n\\\n        window.utility2.nop(opt);\\n\\\n        onError(new Error(\"this is a failed error demo\"));\\n\\\n    };\\n\\\n\\n\\\n    testCaseDict.testCase_passed_ajax_demo = function (opt, onError) {\\n\\\n    /*\\n\\\n     * this function will demo a passed ajax test\\n\\\n     */\\n\\\n        var data;\\n\\\n        opt = {url: \"/\"};\\n\\\n        // test ajax-req for main-page \"/\"\\n\\\n        window.utility2.ajax(opt, function (err, xhr) {\\n\\\n            try {\\n\\\n                // handle err\\n\\\n                console.assert(!err, err);\\n\\\n                // validate \"200 ok\" status\\n\\\n                console.assert(xhr.statusCode === 200, xhr.statusCode);\\n\\\n                // validate non-empty data\\n\\\n                data = xhr.responseText;\\n\\\n                console.assert(data && data.length > 0, data);\\n\\\n                onError();\\n\\\n            } catch (errCaught) {\\n\\\n                onError(errCaught);\\n\\\n            }\\n\\\n        });\\n\\\n    };\\n\\\n\\n\\\n    window.utility2.testRunDefault(testCaseDict);\\n\\\n}());\\n\\\n</textarea>\\n\\\n<button class=\"button\" data-onevent=\"domOnEventInputChange\" id=\"buttonJslintAutofix1\">jslint autofix</button><br>\\n\\\n<pre class= \"colorError\" id=\"outputJslintPre1\" tabindex=\"0\"></pre>\\n\\\n<label>instrumented-code</label>\\n\\\n<textarea class=\"readonly textarea\" id=\"outputTextarea1\" readonly tabindex=\"0\"></textarea>\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"onevent-reset-output readonly textarea\" id=\"outputStdout1\" readonly></textarea>\\n\\\n<div id=\"htmlTestReport2\"></div>\\n\\\n<div id=\"htmlCoverageReport1\"></div>\\n\\\n<script>\\n\\\n/* jslint utility2:true */\\n\\\nwindow.addEventListener(\"load\", function (local) {\\n\\\n\"use strict\";\\n\\\nlocal = window.utility2;\\n\\\ndocument.querySelectorAll(\\n\\\n    \"#buttonTestRun1, #htmlTestReport1\"\\n\\\n).forEach(function (elem) {\\n\\\n    elem.style.display = \"none\";\\n\\\n});\\n\\\nlocal.domOnEventInputChange = function (evt) {\\n\\\n    switch (evt.type + \".\" + evt.target.id) {\\n\\\n    case \"click.buttonJslintAutofix1\":\\n\\\n    case \"keyup.inputTextarea1\":\\n\\\n        // jslint #inputTextarea1\\n\\\n        local.jslintAndPrint(document.querySelector(\\n\\\n            \"#inputTextarea1\"\\n\\\n        ).value, \"inputTextarea1.js\", {\\n\\\n            autofix: evt.target.id === \"buttonJslintAutofix1\",\\n\\\n            conditional: evt.target.id !== \"buttonJslintAutofix1\"\\n\\\n        });\\n\\\n        if (local.jslint.jslintResult.autofix) {\\n\\\n            document.querySelector(\\n\\\n                \"#inputTextarea1\"\\n\\\n            ).value = local.jslint.jslintResult.code;\\n\\\n        }\\n\\\n        document.querySelector(\\n\\\n            \"#outputJslintPre1\"\\n\\\n        ).textContent = local.jslint.jslintResult.errMsg.replace((\\n\\\n            /\\\\u001b\\\\[\\\\d*m/g\\n\\\n        ), \"\").trim();\\n\\\n        // try to cleanup __coverage__\\n\\\n        try {\\n\\\n            delete globalThis.__coverage__[\"/inputTextarea1.js\"];\\n\\\n        } catch (ignore) {}\\n\\\n        // try to cover and eval #inputTextarea1\\n\\\n        try {\\n\\\n            document.querySelector(\\n\\\n                \"#outputTextarea1\"\\n\\\n            ).value = local.istanbul.instrumentSync(\\n\\\n                document.querySelector(\"#inputTextarea1\").value,\\n\\\n                \"/inputTextarea1.js\"\\n\\\n            );\\n\\\n            eval( // jslint ignore:line\\n\\\n                document.querySelector(\"#outputTextarea1\").value\\n\\\n            );\\n\\\n        } catch (errCaught) {\\n\\\n            console.error(errCaught);\\n\\\n        }\\n\\\n        break;\\n\\\n    }\\n\\\n};\\n\\\n// handle evt\\n\\\nlocal.on(\"utility2.testRunEnd\", function () {\\n\\\n    document.querySelector(\\n\\\n        \"#htmlCoverageReport1\"\\n\\\n    ).innerHTML = local.istanbul.coverageReportCreate({\\n\\\n        coverage: globalThis.__coverage__\\n\\\n    });\\n\\\n});\\n\\\nlocal.on(\"utility2.testRunProgressUpdate\", function (testReport) {\\n\\\n    document.querySelector(\\n\\\n        \"#htmlTestReport2\"\\n\\\n    ).innerHTML = local.testReportMerge(testReport, {});\\n\\\n});\\n\\\nlocal.domOnEventInputChange({\\n\\\n    target: {\\n\\\n        id: \"inputTextarea1\"\\n\\\n    },\\n\\\n    type: \"keyup\"\\n\\\n});\\n\\\n});\\n\\\n</script>\\n\\\n<!-- custom-html-end -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.lib.istanbul.js\"></script>\\n\\\n<script src=\"assets.utility2.lib.jslint.js\"></script>\\n\\\n<script src=\"assets.utility2.lib.marked.js\"></script>\\n\\\n<script src=\"assets.utility2.js\"></script>\\n\\\n<script>window.utility2_onReadyBefore.cnt += 1;</script>\\n\\\n<script src=\"jsonp.utility2.stateInit?callback=window.utility2.stateInit\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<script>\\n\\\nif (window.utility2_onReadyBefore) {\\n\\\n    window.utility2_onReadyBefore();\\n\\\n}\\n\\\n</script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div style=\"text-align: center;\">\\n\\\n    [\\n\\\n    this app was created with\\n\\\n    <a\\n\\\n        href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\"\\n\\\n    >utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n/* jslint ignore:end */\nlocal.assetsDict[\"/assets.utility2.js\"] = (\n    local.assetsDict[\"/assets.utility2.js\"]\n    || local.fs.readFileSync(\n        local.path.resolve(local.__dirname + \"/lib.utility2.js\"),\n        \"utf8\"\n    ).replace((\n        /^#!\\//\n    ), \"// \")\n);\n/* validateLineSortedReset */\nlocal.assetsDict[\"/\"] = local.assetsDict[\n    \"/assets.index.template.html\"\n].replace((\n    /\\{\\{env\\.(\\w+?)\\}\\}/g\n), function (match0, match1) {\n    switch (match1) {\n    case \"npm_package_description\":\n        return \"the greatest app in the world!\";\n    case \"npm_package_name\":\n        return \"utility2\";\n    case \"npm_package_nameLib\":\n        return \"utility2\";\n    case \"npm_package_version\":\n        return \"0.0.1\";\n    default:\n        return match0;\n    }\n});\nlocal.assetsDict[\"/assets.example.html\"] = local.assetsDict[\"/\"];\n// init cli\nif (module !== require.main || globalThis.utility2_rollup) {\n    return;\n}\nlocal.assetsDict[\"/assets.example.js\"] = (\n    local.assetsDict[\"/assets.example.js\"]\n    || local.fs.readFileSync(__filename, \"utf8\")\n);\nlocal.assetsDict[\"/favicon.ico\"] = local.assetsDict[\"/favicon.ico\"] || \"\";\nlocal.assetsDict[\"/index.html\"] = local.assetsDict[\"/\"];\n// if $npm_config_timeout_exit exists,\n// then exit this process after $npm_config_timeout_exit ms\nif (Number(process.env.npm_config_timeout_exit)) {\n    setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n}\n// start server\nif (globalThis.utility2_serverHttp1) {\n    return;\n}\nprocess.env.PORT = process.env.PORT || \"8081\";\nconsole.error(\"http-server listening on port \" + process.env.PORT);\nlocal.http.createServer(function (req, res) {\n    req.urlParsed = local.url.parse(req.url);\n    if (local.assetsDict[req.urlParsed.pathname] !== undefined) {\n        res.end(local.assetsDict[req.urlParsed.pathname]);\n        return;\n    }\n    res.statusCode = 404;\n    res.end();\n}).listen(process.env.PORT);\n}());\n}());\n","/assets.test.js":"/* istanbul instrument in package utility2 */\n// assets.utility2.header.js - start\n/* jslint utility2:true */\n/* istanbul ignore next */\n(function (globalThis) {\n    \"use strict\";\n    let consoleError;\n    let debugName;\n    let local;\n    debugName = \"debug\" + String(\"Inline\");\n    // init globalThis\n    globalThis.globalThis = globalThis.globalThis || globalThis;\n    // init debug_inline\n    if (!globalThis[debugName]) {\n        consoleError = console.error;\n        globalThis[debugName] = function (...argList) {\n        /*\n         * this function will both print <argList> to stderr\n         * and return <argList>[0]\n         */\n            consoleError(\"\\n\\n\" + debugName);\n            consoleError(...argList);\n            consoleError(\"\\n\");\n            return argList[0];\n        };\n    }\n    String.prototype.trimEnd = (\n        String.prototype.trimEnd || String.prototype.trimRight\n    );\n    String.prototype.trimStart = (\n        String.prototype.trimStart || String.prototype.trimLeft\n    );\n    // init local\n    local = {};\n    local.local = local;\n    globalThis.globalLocal = local;\n    // init isBrowser\n    local.isBrowser = (\n        typeof globalThis.XMLHttpRequest === \"function\"\n        && globalThis.navigator\n        && typeof globalThis.navigator.userAgent === \"string\"\n    );\n    // init isWebWorker\n    local.isWebWorker = (\n        local.isBrowser && typeof globalThis.importScripts === \"function\"\n    );\n    // init function\n    local.assertOrThrow = function (passed, msg) {\n    /*\n     * this function will throw err.<msg> if <passed> is falsy\n     */\n        if (passed) {\n            return;\n        }\n        throw (\n            (\n                msg\n                && typeof msg.message === \"string\"\n                && typeof msg.stack === \"string\"\n            )\n            // if msg is err, then leave as is\n            ? msg\n            : new Error(\n                typeof msg === \"string\"\n                // if msg is a string, then leave as is\n                ? msg\n                // else JSON.stringify msg\n                : JSON.stringify(msg, undefined, 4)\n            )\n        );\n    };\n    local.coalesce = function (...argList) {\n    /*\n     * this function will coalesce null, undefined, or \"\" in <argList>\n     */\n        let arg;\n        let ii;\n        ii = 0;\n        while (ii < argList.length) {\n            arg = argList[ii];\n            if (arg !== null && arg !== undefined && arg !== \"\") {\n                break;\n            }\n            ii += 1;\n        }\n        return arg;\n    };\n    local.fsReadFileOrDefaultSync = function (pathname, type, dflt) {\n    /*\n     * this function will sync-read <pathname> with given <type> and <dflt>\n     */\n        let fs;\n        // do nothing if module does not exist\n        try {\n            fs = require(\"fs\");\n        } catch (ignore) {\n            return dflt;\n        }\n        pathname = require(\"path\").resolve(pathname);\n        // try to read pathname\n        try {\n            return (\n                type === \"json\"\n                ? JSON.parse(fs.readFileSync(pathname, \"utf8\"))\n                : fs.readFileSync(pathname, type)\n            );\n        } catch (ignore) {\n            return dflt;\n        }\n    };\n    local.fsRmrfSync = function (pathname) {\n    /*\n     * this function will sync \"rm -rf\" <pathname>\n     */\n        let child_process;\n        // do nothing if module does not exist\n        try {\n            child_process = require(\"child_process\");\n        } catch (ignore) {\n            return;\n        }\n        pathname = require(\"path\").resolve(pathname);\n        if (process.platform !== \"win32\") {\n            child_process.spawnSync(\"rm\", [\n                \"-rf\", pathname\n            ], {\n                stdio: [\n                    \"ignore\", 1, 2\n                ]\n            });\n            return;\n        }\n        try {\n            child_process.spawnSync(\"rd\", [\n                \"/s\", \"/q\", pathname\n            ], {\n                stdio: [\n                    \"ignore\", 1, \"ignore\"\n                ]\n            });\n        } catch (ignore) {}\n    };\n    local.fsWriteFileWithMkdirpSync = function (pathname, data, msg) {\n    /*\n     * this function will sync write <data> to <pathname> with \"mkdir -p\"\n     */\n        let fs;\n        let success;\n        // do nothing if module does not exist\n        try {\n            fs = require(\"fs\");\n        } catch (ignore) {\n            return;\n        }\n        pathname = require(\"path\").resolve(pathname);\n        // try to write pathname\n        try {\n            fs.writeFileSync(pathname, data);\n            success = true;\n        } catch (ignore) {\n            // mkdir -p\n            fs.mkdirSync(require(\"path\").dirname(pathname), {\n                recursive: true\n            });\n            // re-write pathname\n            fs.writeFileSync(pathname, data);\n            success = true;\n        }\n        if (success && msg) {\n            console.error(msg.replace(\"{{pathname}}\", pathname));\n        }\n        return success;\n    };\n    local.identity = function (val) {\n    /*\n     * this function will return <val>\n     */\n        return val;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    local.objectAssignDefault = function (tgt = {}, src = {}, depth = 0) {\n    /*\n     * this function will if items from <tgt> are null, undefined, or \"\",\n     * then overwrite them with items from <src>\n     */\n        let recurse;\n        recurse = function (tgt, src, depth) {\n            Object.entries(src).forEach(function ([\n                key, bb\n            ]) {\n                let aa;\n                aa = tgt[key];\n                if (aa === undefined || aa === null || aa === \"\") {\n                    tgt[key] = bb;\n                    return;\n                }\n                if (\n                    depth !== 0\n                    && typeof aa === \"object\" && aa && !Array.isArray(aa)\n                    && typeof bb === \"object\" && bb && !Array.isArray(bb)\n                ) {\n                    recurse(aa, bb, depth - 1);\n                }\n            });\n        };\n        recurse(tgt, src, depth | 0);\n        return tgt;\n    };\n    // require builtin\n    if (!local.isBrowser) {\n        local.assert = require(\"assert\");\n        local.buffer = require(\"buffer\");\n        local.child_process = require(\"child_process\");\n        local.cluster = require(\"cluster\");\n        local.crypto = require(\"crypto\");\n        local.dgram = require(\"dgram\");\n        local.dns = require(\"dns\");\n        local.domain = require(\"domain\");\n        local.events = require(\"events\");\n        local.fs = require(\"fs\");\n        local.http = require(\"http\");\n        local.https = require(\"https\");\n        local.net = require(\"net\");\n        local.os = require(\"os\");\n        local.path = require(\"path\");\n        local.querystring = require(\"querystring\");\n        local.readline = require(\"readline\");\n        local.repl = require(\"repl\");\n        local.stream = require(\"stream\");\n        local.string_decoder = require(\"string_decoder\");\n        local.timers = require(\"timers\");\n        local.tls = require(\"tls\");\n        local.tty = require(\"tty\");\n        local.url = require(\"url\");\n        local.util = require(\"util\");\n        local.vm = require(\"vm\");\n        local.zlib = require(\"zlib\");\n    }\n}((typeof globalThis === \"object\" && globalThis) || window));\n// assets.utility2.header.js - end\n\n\n\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (local) {\n\"use strict\";\n\n\n\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = globalThis.utility2 || require(\"./lib.utility2.js\");\nlocal = local.requireReadme();\nglobalThis.local = local;\n// init test\nlocal.testRunDefault(local);\n}());\n\n\n\n// run shared js-env code - function\n(function () {\nlocal.testCase_FormData_default = function (opt, onError) {\n/*\n * this function will test FormData's default handling-behavior\n */\n    opt = {};\n    opt.blob1 = new local.Blob([\n        \"aa\", \"bb\", local.stringHelloEmoji, 0\n    ]);\n    opt.blob2 = new local.Blob([\n        \"aa\", \"bb\", local.stringHelloEmoji, 0\n    ], {\n        type: \"text/plain; charset=utf-8\"\n    });\n    opt.data = new local.FormData();\n    opt.data.append(\"text1\", \"aabb\" + local.stringHelloEmoji + \"0\");\n    // test file-upload handling-behavior\n    opt.data.append(\"file1\", opt.blob1);\n    // test file-upload and filename handling-behavior\n    opt.data.append(\"file2\", opt.blob2, \"filename2.txt\");\n    opt.method = \"POST\";\n    opt.url = \"/test.echo\";\n    local.ajax(opt, function (err, xhr) {\n        // handle err\n        local.assertOrThrow(!err, err);\n        // validate responseText\n        local.assertOrThrow(xhr.responseText.indexOf(\n            \"\\r\\nContent-Disposition: form-data; \"\n            + \"name=\\\"text1\\\"\\r\\n\\r\\naabbhello \\ud83d\\ude01\\n0\\r\\n\"\n        ) >= 0, xhr.responseText);\n        local.assertOrThrow(xhr.responseText.indexOf(\n            \"\\r\\nContent-Disposition: form-data; \"\n            + \"name=\\\"file1\\\"\\r\\n\\r\\naabbhello \\ud83d\\ude01\\n0\\r\\n\"\n        ) >= 0, xhr.responseText);\n        local.assertOrThrow(xhr.responseText.indexOf(\n            \"\\r\\nContent-Disposition: form-data; name=\\\"file2\\\"; \"\n            + \"filename=\\\"filename2.txt\\\"\\r\\nContent-Type: text/plain; \"\n            + \"charset=utf-8\\r\\n\\r\\naabbhello \\ud83d\\ude01\\n0\\r\\n\"\n        ) >= 0, xhr.responseText);\n        onError(undefined, opt);\n    });\n};\n\nlocal.testCase_FormData_err = function (opt, onError) {\n/*\n * this function will test FormData's err handling-behavior\n */\n    local.testMock([\n        [\n            local.FormData.prototype, {\n                read: function (onError) {\n                    onError(local.errorDefault);\n                }\n            }\n        ]\n    ], function (onError) {\n        local.ajax({\n            data: new local.FormData(),\n            method: \"POST\",\n            url: \"/test.echo\"\n        }, function (err) {\n            // handle err\n            local.assertOrThrow(err, err);\n            onError(undefined, opt);\n        });\n    }, onError);\n};\n\nlocal.testCase_FormData_nullCase = function (opt, onError) {\n/*\n * this function will test FormData's null-case handling-behavior\n */\n    local.ajax({\n        data: new local.FormData(),\n        method: \"POST\",\n        url: \"/test.echo\"\n    }, function (err, xhr) {\n        // handle err\n        local.assertOrThrow(!err, err);\n        // validate responseText\n        local.assertOrThrow((\n            /\\r\\n\\r\\n$/\n        ).test(xhr.responseText), xhr.responseText);\n        onError(undefined, opt);\n    });\n};\n\nlocal.testCase_ajax_cache = function (opt, onError) {\n/*\n * this function will test ajax's cache handling-behavior\n */\n    if (local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    opt = {};\n    local.gotoNext(opt, function (err, data) {\n        switch (opt.gotoState) {\n        case 1:\n            // test http GET handling-behavior\n            local.ajax({\n                url: \"assets.hello.txt\"\n            }, opt.gotoNext);\n            break;\n        case 2:\n            // validate responseText\n            local.assertJsonEqual(data.responseText, local.stringHelloEmoji);\n            // test http GET 304 cache handling-behavior\n            local.ajax({\n                headers: {\n                    \"If-Modified-Since\": (\n                        new Date(Date.now() + 0xffff).toUTCString()\n                    )\n                },\n                url: \"assets.hello.txt\"\n            }, opt.gotoNext);\n            break;\n        case 3:\n            // validate statusCode\n            local.assertJsonEqual(data.statusCode, 304);\n            opt.gotoNext();\n            break;\n        default:\n            onError(err, opt);\n        }\n    });\n    opt.gotoState = 0;\n    opt.gotoNext();\n};\n\nlocal.testCase_ajax_default = function (opt, onError) {\n/*\n * this function will test ajax's default handling-behavior\n */\n    let onParallel;\n    onParallel = local.onParallel(onError);\n    onParallel.cnt += 1;\n\n    // test ajax's abort handling-behavior\n    onParallel.cnt += 1;\n    local.onParallelList({\n        list: [\n            \"\",\n            \"arraybuffer\",\n            \"blob\",\n            \"text\"\n        ]\n    }, function (responseType, onParallel) {\n        responseType = responseType.elem;\n        onParallel.cnt += 1;\n        local.ajax({\n            data: (\n                responseType === \"arraybuffer\"\n                // test POST buffer-data handling-behavior\n                ? new TextEncoder().encode(local.stringHelloEmoji)\n                : responseType === \"blob\"\n                // test POST blob-data handling-behavior\n                ? new local.Blob([\n                    \"\",\n                    new Uint8Array(0),\n                    local.stringHelloEmoji\n                ])\n                // test POST string-data handling-behavior\n                : local.stringHelloEmoji\n            ),\n            method: \"POST\",\n            // test nodejs-res handling-behavior\n            responseType: responseType.replace(\"blob\", \"arraybuffer\"),\n            url: \"/test.body\"\n        }, function (err, xhr) {\n            // handle err\n            local.assertOrThrow(!err, err);\n            // validate statusCode\n            local.assertJsonEqual(xhr.statusCode, 200);\n            // validate responseText\n            switch (responseType) {\n            case \"arraybuffer\":\n            case \"blob\":\n                local.assertJsonEqual(xhr.responseBuffer.byteLength, 11);\n                local.assertJsonEqual(Array.from(xhr.responseBuffer), [\n                    0x68,\n                    0x65,\n                    0x6c,\n                    0x6c,\n                    0x6f,\n                    0x20,\n                    0xf0,\n                    0x9f,\n                    0x98,\n                    0x81,\n                    0x0a\n                ]);\n                break;\n            default:\n                local.assertJsonEqual(xhr.responseText, local.stringHelloEmoji);\n            }\n            onParallel(null, opt);\n        });\n    }, onParallel);\n\n    // test ajax's data handling-behavior\n    onParallel.cnt += 1;\n    opt = local.ajax({\n        url: \"/test.timeout\"\n    }, function (err, xhr) {\n        // handle err\n        local.assertOrThrow(err, err);\n        // validate statusCode\n        local.assertJsonEqual(xhr.statusCode, 500);\n        onParallel(null, opt);\n    });\n    // test multiple-callback handling-behavior\n    opt.onEvent({\n        type: \"abort\"\n    });\n    opt.abort();\n    opt.abort();\n\n    // test ajax's echo handling-behavior\n    onParallel.cnt += 1;\n    local.ajax({\n        _aa: \"aa\",\n        aa: \"aa\",\n        data: local.stringHelloEmoji,\n        // test req-header handling-behavior\n        headers: {\n            \"X-Req-Header-Test\": \"aa\"\n        },\n        method: \"POST\",\n        // test modeDebug handling-behavior\n        modeDebug: true,\n        url: \"/test.echo\"\n    }, function (err, xhr) {\n        // handle err\n        local.assertOrThrow(!err, err);\n        // validate statusCode\n        local.assertJsonEqual(xhr.statusCode, 200);\n        // validate resHeaders\n        local.assertJsonEqual(xhr.resHeaders[\"x-res-header-test\"], \"bb\");\n        // validate responseText\n        local.assertOrThrow((\n            /\\r\\nhello\\u0020\\ud83d\\ude01\\n$/\n        ).test(xhr.responseText), xhr.responseText);\n        local.assertOrThrow((\n            /\\r\\nx-req-header-test:\\u0020aa\\r\\n/\n        ).test(xhr.responseText), xhr.responseText);\n        // validate properties\n        local.assertJsonEqual(xhr._aa, undefined);\n        local.assertJsonEqual(xhr.aa, \"aa\");\n        onParallel(null, opt);\n    });\n\n    // test ajax's err handling-behavior\n    onParallel.cnt += 1;\n    local.onParallelList({\n        list: [\n            {\n                // test 404-not-found handling-behavior\n                url: \"/test.err-404\"\n            }, {\n                // test 500-internal-server-error handling-behavior\n                url: \"/test.err-500\"\n            }, {\n                // test undefined-status-code handling-behavior\n                url: \"/test.err-undefined\"\n            }\n        ]\n    }, function (opt2, onParallel) {\n        onParallel.cnt += 1;\n        local.ajax(opt2.elem, function (err) {\n            // handle err\n            local.assertOrThrow(err, err);\n            onParallel(null, opt);\n        });\n    }, onParallel);\n\n    // test ajax's file handling-behavior\n    onParallel.cnt += 1;\n    local.ajax({\n        url: \"LICENSE\"\n    }, function (err, xhr) {\n        // handle err\n        local.assertOrThrow(!err, err);\n        // validate statusCode\n        local.assertJsonEqual(xhr.statusCode, 200);\n        // validate responseText\n        local.assertOrThrow(xhr.responseText.indexOf(\n            \"MIT License (https://opensource.org/licenses/MIT)\\n\\n\"\n        ) === 0, xhr.data);\n        onParallel(null, opt);\n    });\n\n    // test ajax's standalone handling-behavior\n    onParallel.cnt += 1;\n    local.testMock([\n        [\n            local, {\n                utility2: null\n            }\n        ]\n    ], function (onError) {\n        [\n            \"\", \"arraybuffer\"\n        ].forEach(function (responseType) {\n            // test default handling-behavior\n            onParallel.cnt += 1;\n            local.ajax({\n                responseType,\n                url: (\n                    local.isBrowser\n                    ? location.href\n                    : local.serverLocalHost\n                )\n            }, function (err, xhr) {\n                // handle err\n                local.assertOrThrow(!err, err);\n                // validate statusCode\n                local.assertJsonEqual(xhr.statusCode, 200);\n                onParallel();\n            });\n            // test err handling-behavior\n            onParallel.cnt += 1;\n            local.ajax({\n                responseType,\n                undefined,\n                url: (\n                    local.isBrowser\n                    ? location.href.replace((\n                        /\\?.*$/\n                    ), \"\")\n                    : local.serverLocalHost\n                ) + \"/undefined\"\n            }, function (err, xhr) {\n                // handle err\n                local.assertOrThrow(err, err);\n                // validate statusCode\n                local.assertJsonEqual(xhr.statusCode, 404);\n                onParallel();\n            });\n        });\n        onError(undefined, opt);\n    }, onParallel);\n    onParallel();\n\n    // test ajax's timeout handling-behavior\n    onParallel.cnt += 1;\n    setTimeout(function () {\n        local.ajax({\n            timeout: 1,\n            url: \"/test.timeout\"\n        }, function (err, xhr) {\n            // handle err\n            local.assertOrThrow(err, err);\n            // validate statusCode\n            local.assertJsonEqual(xhr.statusCode, 500);\n            onParallel(null, opt);\n        });\n    }, 1000);\n};\n\nlocal.testCase_assertXxx_default = function (opt, onError) {\n/*\n * this function will test assertXxx's default handling-behavior\n */\n    // test assertion passed\n    local.assertOrThrow(true, true);\n    // test assertion failed with undefined message\n    local.tryCatchOnError(function () {\n        local.assertOrThrow(null);\n    }, function (err) {\n        // handle err\n        local.assertOrThrow(err, err);\n        // validate err.message\n        local.assertJsonEqual(err.message, \"\");\n    });\n    // test assertion failed with string message\n    local.tryCatchOnError(function () {\n        local.assertOrThrow(null, \"aa\");\n    }, function (err) {\n        // handle err\n        local.assertOrThrow(err, err);\n        // validate err.message\n        local.assertJsonEqual(err.message, \"aa\");\n    });\n    // test assertion failed with errObj\n    local.tryCatchOnError(function () {\n        local.assertOrThrow(null, local.errorDefault);\n    }, function (err) {\n        // handle err\n        local.assertOrThrow(err, err);\n    });\n    // test assertion failed with json object\n    local.tryCatchOnError(function () {\n        local.assertOrThrow(null, {\n            aa: 1\n        });\n    }, function (err) {\n        // handle err\n        local.assertOrThrow(err, err);\n        // validate err.message\n        local.assertJsonEqual(err.message, \"{\\n    \\\"aa\\\": 1\\n}\");\n    });\n    [\n        \"\", 0, false, null, undefined\n    ].forEach(function (aa, ii) {\n        [\n            \"\", 0, false, null, undefined\n        ].forEach(function (bb, jj) {\n            if (ii === jj) {\n                // test assertJsonEqual's handling-behavior\n                local.assertJsonEqual(aa, bb);\n            } else {\n                // test assertJsonNotEqual's handling-behavior\n                local.assertJsonNotEqual(aa, bb);\n            }\n        });\n    });\n    onError(undefined, opt);\n};\n\nlocal.testCase_base64Xxx_default = function (opt, onError) {\n/*\n * this function will test base64Xxx's default handling-behavior\n */\n    opt = {};\n    opt.base64 = local.base64FromBuffer(\n        local.stringCharsetAscii + local.stringHelloEmoji\n    );\n    // test null-case handling-behavior\n    local.assertJsonEqual(local.base64FromBuffer(), \"\");\n    local.assertJsonEqual(local.bufferToUtf8(local.base64ToBuffer()), \"\");\n    local.assertJsonEqual(local.base64ToUtf8(), \"\");\n    local.assertJsonEqual(local.base64FromBuffer(local.base64ToBuffer()), \"\");\n    local.assertJsonEqual(local.base64FromBuffer(local.base64ToUtf8()), \"\");\n    // test identity handling-behavior\n    local.assertJsonEqual(\n        local.base64FromBuffer(local.base64ToBuffer(opt.base64)),\n        opt.base64\n    );\n    local.assertJsonEqual(\n        local.base64FromBuffer(local.base64ToUtf8(opt.base64)),\n        opt.base64\n    );\n    onError(undefined, opt);\n};\n\nlocal.testCase_blobRead_default = function (opt, onError) {\n/*\n * this function will test blobRead's default handling-behavior\n */\n    let onParallel;\n    onParallel = local.onParallel(onError);\n    onParallel.cnt += 1;\n    // test data handling-behavior\n    onParallel.cnt += 1;\n    local.blobRead(new local.Blob([\n        \"\",\n        \"aa\",\n        \"bb\",\n        new Uint8Array(0),\n        local.stringHelloEmoji\n    ]), function (err, data) {\n        // handle err\n        local.assertOrThrow(!err, err);\n        // validate data\n        local.assertJsonEqual(\n            local.bufferToUtf8(data),\n            \"aabbhello \\ud83d\\ude01\\n\"\n        );\n        onParallel(null, opt);\n    });\n    if (!local.isBrowser) {\n        onParallel(null, opt);\n        return;\n    }\n    // test err handling-behavior\n    onParallel.cnt += 1;\n    local.testMock([\n        [\n            FileReader.prototype, {\n                readAsArrayBuffer: function () {\n                    this.onabort({\n                        type: \"abort\"\n                    });\n                    this.onerror({\n                        type: \"error\"\n                    });\n                }\n            }\n        ]\n    ], function (onError) {\n        local.blobRead(null, function (err) {\n            // handle err\n            local.assertOrThrow(err, err);\n        });\n        onError(undefined, opt);\n    }, onParallel);\n    onParallel();\n};\n\nlocal.testCase_bufferIndexOfSubBuffer_default = function (opt, onError) {\n/*\n * this function will test bufferIndexOfSubBuffer's default handling-behavior\n */\n[\n    {\n        buffer: \"\",\n        subBuffer: \"\",\n        validate: 0\n    }, {\n        buffer: \"\",\n        subBuffer: \"aa\",\n        validate: -1\n    }, {\n        buffer: \"aa\",\n        subBuffer: \"\",\n        validate: 0\n    }, {\n        buffer: \"aa\",\n        subBuffer: \"aa\",\n        validate: 0\n    }, {\n        buffer: \"aa\",\n        subBuffer: \"bb\",\n        validate: -1\n    }, {\n        buffer: \"aaaa\",\n        subBuffer: \"aa\",\n        validate: 0\n    }, {\n        buffer: \"aabb\",\n        subBuffer: \"aa\",\n        validate: 0\n    }, {\n        buffer: \"aabb\",\n        subBuffer: \"bb\",\n        validate: 2\n    }, {\n        buffer: \"aabbaa\",\n        subBuffer: \"aa\",\n        validate: 0\n    }, {\n        buffer: \"aabbaa\",\n        subBuffer: \"bb\",\n        validate: 2\n    }, {\n        buffer: \"aabbaa\",\n        subBuffer: \"ba\",\n        validate: 3\n    }\n].forEach(function (opt) {\n    local.assertJsonEqual(local.bufferIndexOfSubBuffer(\n        new TextEncoder().encode(opt.buffer),\n        new TextEncoder().encode(opt.subBuffer),\n        opt.fromIndex\n    ), opt.validate);\n});\nonError(undefined, opt);\n};\n\nlocal.testCase_bufferValidateAndCoerce_err = function (opt, onError) {\n/*\n * this function will test bufferValidateAndCoerce's err handling-behavior\n */\n    [[], 0, {}].forEach(function (elem) {\n        opt = null;\n        try {\n            local.bufferValidateAndCoerce(elem);\n        } catch (errCaught) {\n            opt = errCaught;\n        }\n        // handle err\n        local.assertOrThrow(opt, elem);\n    });\n    onError(undefined, opt);\n};\n\nlocal.testCase_buildApidoc_default = function (opt, onError) {\n/*\n * this function will test buildApidoc's default handling-behavior\n */\n    local._testCase_buildApidoc_default({\n        blacklistDict: {}\n    }, onError, opt);\n};\n\nlocal.testCase_buildApp_default = function (opt, onError) {\n/*\n * this function will test buildApp's default handling-behavior\n */\n    if (local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    local.testCase_buildReadme_default(opt, local.onErrorThrow);\n    local.testCase_buildLib_default(opt, local.onErrorThrow);\n    local.testCase_buildTest_default(opt, local.onErrorThrow);\n    local.buildApp({\n        assetsList: [\n            {\n                file: \"/assets.hello.txt\",\n                url: \"/assets.hello.txt\"\n            }, {\n                file: \"/assets.script_only.html\",\n                url: \"/assets.script_only.html\"\n            }, {\n                file: \"/assets.utility2.lib.istanbul.js\",\n                url: \"/assets.utility2.lib.istanbul.js\"\n            }, {\n                file: \"/assets.utility2.lib.jslint.js\",\n                url: \"/assets.utility2.lib.jslint.js\"\n            }, {\n                file: \"/assets.utility2.lib.marked.js\",\n                url: \"/assets.utility2.lib.marked.js\"\n            }, {\n                file: \"/assets.utility2.rollup.js\",\n                url: \"/assets.utility2.rollup.js\"\n            }\n        ]\n    }, onError);\n};\n\nlocal.testCase_buildLib_default = function (opt, onError) {\n/*\n * this function will test buildLib's default handling-behavior\n */\n    if (local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    local.testMock([\n        [\n            local, {\n                templateRenderMyApp: function () {\n                    return local.assetsDict[\"/assets.my_app.template.js\"];\n                }\n            }\n        ], [\n            local.fs, {\n                // test customize-local handling-behavior\n                existsSync: function () {\n                    return true;\n                },\n                // test duplicate local function handling-behavior\n                readFileSync: function () {\n                    return (\n                        \"local.nop = function () {\\n\"\n                        + \"/*\\n\"\n                        + \" * this function will do nothing\\n\"\n                        + \" */\\n\"\n                        + \"    return;\\n\"\n                        + \"};\\n\"\n                        + \"local.nop = function () {\\n\"\n                        + \"/*\\n\"\n                        + \" * this function will do nothing\\n\"\n                        + \" */\\n\"\n                        + \"    return;\\n\"\n                        + \"};\\n\"\n                    );\n                },\n                writeFileSync: local.nop\n            }\n        ]\n    ], function (onError) {\n        local.buildLib({}, onError);\n    }, local.onErrorThrow);\n    local.buildLib({}, onError);\n};\n\nlocal.testCase_buildReadme_default = function (opt, onError) {\n/*\n * this function will test buildReadme's default handling-behavior\n */\n    if (local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    opt = {};\n    // test shNpmTestPublished handling-behavior\n    opt.dataFrom = local.fs.readFileSync(\"README.md\", \"utf8\").replace(\n        \"#\\u0021! shNpmTestPublished\",\n        \"shNpmTestPublished\"\n    );\n    opt = {};\n    opt.customize = function () {\n        // search-and-replace - customize dataTo\n        [\n            // customize quickstart-example-js-instruction\n            (\n                /#\\u0020quickstart\\u0020example.js[\\S\\s]*?\\n\\n\\n\\n/\n            ),\n            // customize quickstart-example-js-script\n            (\n                /#unless\\u0020isRollup[\\S\\s]*?<script\\u0020src=\"assets\\.example\\.js\">/\n            ),\n            // customize quickstart-example-js-screenshot\n            (\n                /```[^`]*?\\n#\\u0020extra\\u0020screenshots/\n            ),\n            // customize build-script\n            (\n                /\\n#\\u0020internal\\u0020build\\u0020script\\n[\\S\\s]*?\\nshBuildCi\\n/\n            )\n        ].forEach(function (rgx) {\n            opt.dataFrom.replace(rgx, function (match0) {\n                opt.dataTo = opt.dataTo.replace(rgx, match0);\n            });\n        });\n    };\n    local.buildReadme(opt, onError);\n};\n\nlocal.testCase_buildXxx_default = function (opt, onError) {\n/*\n * this function will test buildXxx's default handling-behavior\n */\n    local.testMock([\n        [\n            local, {\n                assetsDict: {\n                    \"/\": \"\"\n                },\n                browserTest: local.nop,\n                buildApidoc: local.nop,\n                buildLib: local.nop,\n                buildReadme: local.nop,\n                buildTest: local.nop,\n                testCase_buildReadme_default: local.nop,\n                testCase_buildLib_default: local.nop,\n                testCase_buildTest_default: local.nop\n            }\n        ]\n    ], function (onError) {\n        local._testCase_buildApidoc_default({}, local.nop);\n        local._testCase_buildApp_default({}, local.nop);\n        local._testCase_buildLib_default({}, local.nop);\n        local._testCase_buildReadme_default({}, local.nop);\n        local._testCase_buildTest_default({}, local.nop);\n        local._testCase_webpage_default({}, local.nop);\n        local.assetsDict[\"/\"] = \"<script src=\\\"assets.test.js\\\"></script>\";\n        local._testCase_webpage_default({}, local.nop);\n        onError(undefined, opt);\n    }, onError);\n};\n\nlocal.testCase_childProcessSpawnWithTimeout_default = function (\n    opt,\n    onError\n) {\n/*\n * this function will test\n * childProcessSpawnWithTimeout's default handling-behavior\n */\n    let onParallel;\n    if (local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    opt = {};\n    onParallel = local.onParallel(onError);\n    onParallel.cnt += 1;\n    // test default handling-behavior\n    onParallel.cnt += 1;\n    local.childProcessSpawnWithTimeout(\"ls\").on(\n        \"error\",\n        onParallel\n    ).on(\"exit\", function (exitCode, signal) {\n        // validate exitCode\n        local.assertJsonEqual(exitCode, 0);\n        // validate signal\n        local.assertJsonEqual(signal, null);\n        onParallel(null, opt);\n    });\n    // test timeout handling-behavior\n    onParallel.cnt += 1;\n    local.testMock([\n        [\n            local, {\n                timeoutDefault: 1000\n            }\n        ]\n    ], function (onError) {\n        opt.childProcess = (\n            local.childProcessSpawnWithTimeout(\"sleep\", [\n                5000\n            ])\n        );\n        onError(undefined, opt);\n    }, local.onErrorThrow);\n    opt.childProcess.on(\n        \"error\",\n        onParallel\n    ).on(\"exit\", function (exitCode, signal) {\n        // validate exitCode\n        local.assertJsonEqual(exitCode, null);\n        // validate signal\n        local.assertJsonEqual(signal, \"SIGKILL\");\n        onParallel(null, opt);\n    });\n    onParallel(null, opt);\n};\n\nlocal.testCase_childProcessSpawnWithUtility2_err = function (\n    opt,\n    onError\n) {\n/*\n * this function will test\n * childProcessSpawnWithTimeout's err handling-behavior\n */\n    if (local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    local.testMock([\n        // test __dirname handling-behavior\n        [\n            process.env, {\n                npm_config_dir_utility2: \"\"\n            }\n        ]\n    ], function (onError) {\n        local.local.childProcessSpawnWithUtility2(\"undefined\", function (err) {\n            // handle err\n            local.assertOrThrow(err, err);\n        });\n        onError(undefined, opt);\n    }, onError);\n};\n\nlocal.testCase_cliRun_default = function (opt, onError) {\n/*\n * this function will test cliRun's default handling-behavior\n */\n    if (local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    local.testMock([\n        [\n            local, {\n                replStart: null\n            }\n        ], [\n            local.cliDict, {\n                _default: local.nop,\n                _help: null\n            }\n        ], [\n            local.repl, {\n                start: local.nop\n            }\n        ], [\n            local.vm, {\n                runInThisContext: local.nop\n            }\n        ], [\n            process, {\n                argv: []\n            }\n        ]\n    ], function (onError) {\n        // test default handling-behavior\n        local.cliRun({\n            rgxComment: (\n                /^/\n            )\n        });\n        // test builtin handling-behavior\n        [\n            \"--eval\",\n            \"--help\",\n            \"--interactive\",\n            \"--version\",\n            \"undefined\"\n        ].forEach(function (key) {\n            process.argv[2] = key;\n            local.cliRun();\n        });\n        // test err handling-behavior\n        local.cliDict._default = null;\n        local.cliDict._help = null;\n        local.tryCatchOnError(local.cliRun, local.nop);\n        onError(undefined, opt);\n    }, onError);\n};\n\nlocal.testCase_corsBackendHostInject_default = function (opt, onError) {\n/*\n * this function will corsBackendHostInject's default handling-behavior\n */\n    // test null-case handling-behavior\n    local.assertJsonEqual(local.corsBackendHostInject(), undefined);\n    // test override-all handling-behavior\n    local.assertJsonEqual(local.corsBackendHostInject(\n        \"cc.com\",\n        \"aa-alpha.bb.com\",\n        null,\n        {\n            host: \"github.io\",\n            pathname: \"/build..beta..travis-ci.org/\"\n        }\n    ), \"aa-beta.bb.com\");\n    // test override-rgx handling-behavior\n    local.assertJsonEqual(local.corsBackendHostInject(\n        \"cc/dd\",\n        \"aa-alpha.bb.com/\",\n        (\n            /(^cc\\/)/m\n        ),\n        {\n            host: \"github.io\",\n            pathname: \"/build..beta..travis-ci.org/\"\n        }\n    ), \"aa-beta.bb.com/cc/dd\");\n    onError(undefined, opt);\n};\n\nlocal.testCase_corsForwardProxyHostIfNeeded_default = function (\n    opt,\n    onError\n) {\n/*\n * this function will corsForwardProxyHostIfNeeded's default handling-behavior\n */\n    if (!local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    local.assertOrThrow(local.corsForwardProxyHostIfNeeded({\n        location: {\n            host: \"undefined.github.io\"\n        },\n        url: \"https://example.com\"\n    }).indexOf(\".herokuapp.com\") >= 0);\n    onError(undefined, opt);\n};\n\n/* istanbul ignore next */\nlocal.testCase_cryptoAesXxxCbcRawXxx_default = function (opt, onError) {\n/*\n * this function will cryptoAesXxxCbcRawXxx's default handling-behavior\n */\n    if (!local.nop()) {\n        onError();\n        return;\n    }\n    opt = {};\n    local.gotoNext(opt, function (err, data) {\n        switch (opt.gotoState) {\n        case 1:\n            // encrypt data\n            opt.data = new TextEncoder().encode(\"aa\");\n            opt.key = \"0123456789abcdef0123456789abcdef\";\n            opt.mode = null;\n            local.cryptoAesXxxCbcRawEncrypt(opt, opt.gotoNext);\n            break;\n        case 2:\n            // decrypt data\n            opt.data = data.buffer;\n            local.cryptoAesXxxCbcRawDecrypt(opt, opt.gotoNext);\n            break;\n        case 3:\n            // validate data\n            local.assertJsonEqual(local.bufferToUtf8(data), \"aa\");\n            opt.gotoNext();\n            break;\n        case 4:\n            // encrypt data - base64\n            opt.data = new TextEncoder().encode(\"aa\");\n            opt.key = (\n                \"0123456789abcdef0123456789abcdef\"\n                + \"0123456789abcdef0123456789abcdef\"\n            );\n            opt.mode = \"base64\";\n            local.cryptoAesXxxCbcRawEncrypt(opt, opt.gotoNext);\n            break;\n        case 5:\n            // decrypt data - base64\n            opt.data = data;\n            local.cryptoAesXxxCbcRawDecrypt(opt, opt.gotoNext);\n            break;\n        case 6:\n            // validate data\n            local.assertJsonEqual(local.bufferToUtf8(data), \"aa\");\n            opt.gotoNext();\n            break;\n        default:\n            onError(err, opt);\n        }\n    });\n    opt.gotoState = 0;\n    opt.gotoNext();\n};\n\nlocal.testCase_domFragmentRender_default = function (opt, onError) {\n/*\n * this function will test domFragmentRender's default handling-behavior\n */\n    if (!local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    local.assertJsonEqual(local.domFragmentRender(\"<div>{{value}}</div>\", {\n        value: \"aa\"\n    }).children[0].outerHTML, \"<div>aa</div>\");\n    onError(undefined, opt);\n};\n\nlocal.testCase_isNullOrUndefined_default = function (opt, onError) {\n/*\n * this function will test isNullOrUndefined's default handling-behavior\n */\n    // validate data\n    local.assertJsonEqual(local.isNullOrUndefined(null), true);\n    // validate data\n    local.assertJsonEqual(local.isNullOrUndefined(undefined), true);\n    // validate data\n    local.assertJsonEqual(local.isNullOrUndefined(false), false);\n    onError(undefined, opt);\n};\n\nlocal.testCase_jsonCopy_default = function (opt, onError) {\n/*\n * this function will test jsonCopy's default handling-behavior\n */\n// test various data-type handling-behavior\n[\n    undefined, null, false, true, 0, 1, 1.5, \"a\"\n].forEach(function (elem) {\n    local.assertJsonEqual(local.jsonCopy(elem), elem);\n});\nonError(undefined, opt);\n};\n\nlocal.testCase_jsonStringifyOrdered_default = function (opt, onError) {\n/*\n * this function will test jsonStringifyOrdered's default handling-behavior\n */\n    // test data-type handling-behavior\n    ([\n        undefined,\n        null,\n        false,\n        true,\n        0,\n        1,\n        1.5,\n        \"a\",\n        {},\n        []\n    ]).forEach(function (data) {\n        local.assertJsonEqual(\n            local.jsonStringifyOrdered(data),\n            JSON.stringify(data)\n        );\n    });\n    // test data-ordering handling-behavior\n    opt = {\n        // test nested dict handling-behavior\n        ff: {\n            hh: 2,\n            gg: 1\n        },\n        // test nested array handling-behavior\n        ee: [\n            1, null, undefined\n        ],\n        dd: local.nop,\n        cc: undefined,\n        bb: null,\n        aa: 1\n    };\n    // test circular-reference handling-behavior\n    opt.zz = opt;\n    local.assertJsonEqual(\n        opt,\n        {\n            aa: 1,\n            bb: null,\n            ee: [\n                1, null, null\n            ],\n            ff: {\n                gg: 1,\n                hh: 2\n            }\n        }\n    );\n    onError(undefined, opt);\n};\n\nlocal.testCase_libUtility2Js_standalone = function (opt, onError) {\n/*\n * this function will test lib.utility2.js's standalone handling-behavior\n */\n    if (local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    local.fs.writeFileSync(\"tmp/lib.utility2.js\", local.fs.readFileSync(\n        \"lib.utility2.js\",\n        \"utf8\"\n    ).replace(\"/* istanbul instrument in package utility2 */\", \"\"));\n    require(\"./tmp/lib.utility2.js\");\n    onError(undefined, opt);\n};\n\nlocal.testCase_listGetElementRandom_default = function (opt, onError) {\n/*\n * this function will test listGetRandom's default handling-behavior\n */\n    opt = {};\n    // init list\n    opt.list = [\n        \"aa\", \"bb\", \"cc\", \"dd\"\n    ];\n    opt.elemDict = {};\n    // get 1000 random elem from list\n    opt.ii = 0;\n    while (opt.ii < 1000) {\n        opt.elemDict[local.listGetElementRandom(opt.list)] = true;\n        opt.ii += 1;\n    }\n    // validate all elem were retrieved from list\n    local.assertJsonEqual(\n        Object.keys(opt.elemDict).sort(),\n        [\n            \"aa\", \"bb\", \"cc\", \"dd\"\n        ]\n    );\n    onError(undefined, opt);\n};\n\nlocal.testCase_listShuffle_default = function (opt, onError) {\n/*\n * this function will test listShuffle's default handling-behavior\n */\n    opt = {};\n    // init list\n    opt.list = \"[0,1]\";\n    // shuffle list 100 times\n    opt.ii = 0;\n    while (opt.ii < 100) {\n        opt.listShuffled = JSON.stringify(\n            local.listShuffle(JSON.parse(opt.list))\n        );\n        // validate shuffled list\n        local.assertJsonEqual(opt.listShuffled.length, opt.list.length);\n        opt.changed = opt.changed || opt.listShuffled !== opt.list;\n        opt.ii += 1;\n    }\n    // validate list changed at least once during shuffle\n    local.assertOrThrow(opt.changed, opt);\n    onError(undefined, opt);\n};\n\nlocal.testCase_localStorageSetItemOrClear_default = function (\n    opt,\n    onError\n) {\n/*\n * this function will localStorageSetItemOrClear's default handling-behavior\n */\n    if (!local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    local.localStorageSetItemOrClear(\n        \"testCase_localStorageSetItemOrClear_default\",\n        null\n    );\n    local.assertJsonEqual(\n        localStorage.testCase_localStorageSetItemOrClear_default,\n        \"null\"\n    );\n    local.testMock([\n        [\n            localStorage, {\n                clear: null,\n                setItem: function () {\n                    throw local.errorDefault;\n                }\n            }\n        ]\n    ], function (onError) {\n        localStorage.clear = onError;\n        local.localStorageSetItemOrClear(\n            \"testCase_localStorageSetItemOrClear_default\",\n            null\n        );\n    }, onError);\n};\n\nlocal.testCase_middlewareForwardProxy_default = function (opt, onError) {\n/*\n * this function will test middlewareForwardProxy's default handling-behavior\n */\n    let onParallel;\n    if (local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    onParallel = local.onParallel(onError);\n    onParallel.cnt += 1;\n    // test preflight-cors handling-behavior\n    onParallel.cnt += 1;\n    local.ajax({\n        headers: {\n            \"access-control-request-headers\": (\n                \"forward-proxy-headers,forward-proxy-url\"\n            )\n        },\n        method: \"OPTIONS\",\n        url: \"\"\n    }, onParallel);\n    // test forward-proxy-http handling-behavior\n    onParallel.cnt += 1;\n    local.ajax({\n        headers: {\n            \"forward-proxy-url\": \"/assets.hello.txt\"\n        },\n        url: \"\"\n    }, function (err, xhr) {\n        // handle err\n        local.assertOrThrow(!err, err);\n        // validate responseText\n        local.assertJsonEqual(xhr.responseText, local.stringHelloEmoji);\n        onParallel(null, opt, xhr);\n    });\n    // test err handling-behavior\n    onParallel.cnt += 1;\n    local.ajax({\n        headers: {\n            \"forward-proxy-url\": \"https://undefined:0\"\n        },\n        url: \"\"\n    }, function (err) {\n        // handle err\n        local.assertOrThrow(err, err);\n        onParallel(null, opt);\n    });\n    onParallel(null, opt);\n};\n\nlocal.testCase_moduleDirname_default = function (opt, onError) {\n/*\n * this function will test moduleDirname's default handling-behavior\n */\n    if (local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    // test null-case handling-behavior\n    local.assertJsonEqual(\n        local.moduleDirname(null, module.paths),\n        process.cwd()\n    );\n    // test path handling-behavior\n    local.assertJsonEqual(\n        local.moduleDirname(\".\", module.paths),\n        process.cwd()\n    );\n    local.assertJsonEqual(\n        local.moduleDirname(\"./\", module.paths),\n        process.cwd()\n    );\n    // test module-does-not-exist handling-behavior\n    local.assertJsonEqual(\n        local.moduleDirname(\"syntax-err\", module.paths),\n        \"\"\n    );\n    onError(undefined, opt);\n};\n\nlocal.testCase_numberToRomanNumerals_default = function (opt, onError) {\n/*\n * this function will test numberToRomanNumerals's default handling-behavior\n */\n    opt = {};\n    opt.list = [\n        \"\",\n        \"I\",\n        \"II\",\n        \"III\",\n        \"IV\",\n        \"V\",\n        \"VI\",\n        \"VII\",\n        \"VIII\",\n        \"IX\",\n        \"X\",\n        \"XI\",\n        \"XII\",\n        \"XIII\",\n        \"XIV\",\n        \"XV\",\n        \"XVI\",\n        \"XVII\",\n        \"XVIII\",\n        \"XIX\",\n        \"XX\",\n        \"XXI\",\n        \"XXII\",\n        \"XXIII\",\n        \"XXIV\",\n        \"XXV\",\n        \"XXVI\",\n        \"XXVII\",\n        \"XXVIII\",\n        \"XXIX\",\n        \"XXX\",\n        \"XXXI\",\n        \"XXXII\",\n        \"XXXIII\",\n        \"XXXIV\",\n        \"XXXV\",\n        \"XXXVI\",\n        \"XXXVII\",\n        \"XXXVIII\",\n        \"XXXIX\",\n        \"XL\",\n        \"XLI\",\n        \"XLII\",\n        \"XLIII\",\n        \"XLIV\",\n        \"XLV\",\n        \"XLVI\",\n        \"XLVII\",\n        \"XLVIII\",\n        \"XLIX\",\n        \"L\",\n        \"LI\",\n        \"LII\",\n        \"LIII\",\n        \"LIV\",\n        \"LV\",\n        \"LVI\",\n        \"LVII\",\n        \"LVIII\",\n        \"LIX\",\n        \"LX\",\n        \"LXI\",\n        \"LXII\",\n        \"LXIII\",\n        \"LXIV\",\n        \"LXV\",\n        \"LXVI\",\n        \"LXVII\",\n        \"LXVIII\",\n        \"LXIX\",\n        \"LXX\",\n        \"LXXI\",\n        \"LXXII\",\n        \"LXXIII\",\n        \"LXXIV\",\n        \"LXXV\",\n        \"LXXVI\",\n        \"LXXVII\",\n        \"LXXVIII\",\n        \"LXXIX\",\n        \"LXXX\",\n        \"LXXXI\",\n        \"LXXXII\",\n        \"LXXXIII\",\n        \"LXXXIV\",\n        \"LXXXV\",\n        \"LXXXVI\",\n        \"LXXXVII\",\n        \"LXXXVIII\",\n        \"LXXXIX\",\n        \"XC\",\n        \"XCI\",\n        \"XCII\",\n        \"XCIII\",\n        \"XCIV\",\n        \"XCV\",\n        \"XCVI\",\n        \"XCVII\",\n        \"XCVIII\",\n        \"XCIX\",\n        \"C\"\n    ];\n    opt.ii = 0;\n    while (opt.ii < 10) {\n        local.assertJsonEqual(\n            local.numberToRomanNumerals(opt.ii),\n            opt.list[opt.ii]\n        );\n        opt.ii += 1;\n    }\n    onError(undefined, opt);\n};\n\nlocal.testCase_objectAssignRecurse_default = function (opt, onError) {\n/*\n * this function will test objectAssignRecurse's default handling-behavior\n */\n    // test null-case handling-behavior\n    local.objectAssignRecurse();\n    local.objectAssignRecurse({});\n    // test falsy handling-behavior\n    [\n        \"\", 0, false, null, undefined\n    ].forEach(function (aa) {\n        [\n            \"\", 0, false, null, undefined\n        ].forEach(function (bb) {\n            local.assertJsonEqual(\n                local.objectAssignRecurse({\n                    data: aa\n                }, {\n                    data: bb\n                }).data,\n                bb === undefined\n                ? aa\n                : bb\n            );\n        });\n    });\n    // test non-recursive handling-behavior\n    local.assertJsonEqual(local.objectAssignRecurse({\n        aa: 1,\n        bb: {\n            cc: 1\n        },\n        cc: {\n            dd: 1\n        },\n        dd: [\n            1, 1\n        ],\n        ee: [\n            1, 1\n        ]\n    }, {\n        aa: 2,\n        bb: {\n            dd: 2\n        },\n        cc: {\n            ee: 2\n        },\n        dd: [\n            2, 2\n        ],\n        ee: {\n            ff: 2\n        }\n    // test default-depth handling-behavior\n    }, null), {\n        aa: 2,\n        bb: {\n            dd: 2\n        },\n        cc: {\n            ee: 2\n        },\n        dd: [\n            2, 2\n        ],\n        ee: {\n            ff: 2\n        }\n    });\n    // test recursive handling-behavior\n    local.assertJsonEqual(local.objectAssignRecurse({\n        aa: 1,\n        bb: {\n            cc: 1\n        },\n        cc: {\n            dd: 1\n        },\n        dd: [\n            1, 1\n        ],\n        ee: [\n            1, 1\n        ]\n    }, {\n        aa: 2,\n        bb: {\n            dd: 2\n        },\n        cc: {\n            ee: 2\n        },\n        dd: [\n            2, 2\n        ],\n        ee: {\n            ff: 2\n        }\n    // test depth handling-behavior\n    }, 2), {\n        aa: 2,\n        bb: {\n            cc: 1,\n            dd: 2\n        },\n        cc: {\n            dd: 1,\n            ee: 2\n        },\n        dd: [\n            2, 2\n        ],\n        ee: {\n            ff: 2\n        }\n    });\n    // test env with empty-string handling-behavior\n    local.assertJsonEqual(local.objectAssignRecurse(\n        local.env,\n        {\n            \"emptyString\": null\n        },\n        // test default-depth handling-behavior\n        null,\n        local.env\n    ).emptyString, \"\");\n    onError(undefined, opt);\n};\n\nlocal.testCase_onErrorDefault_default = function (opt, onError) {\n/*\n * this function will test onErrorDefault's default handling-behavior\n */\n    local.testMock([\n        [\n            console, {\n                error: function (arg) {\n                    opt = arg;\n                }\n            }\n        ], [\n            globalThis, {\n                __coverage__: null\n            }\n        ]\n    ], function (onError) {\n        // test no err handling-behavior\n        local.onErrorDefault();\n        // validate opt\n        local.assertOrThrow(opt !== local.errorDefault, opt);\n        // test err handling-behavior\n        local.onErrorDefault(local.errorDefault);\n        // validate opt\n        local.assertOrThrow(opt === local.errorDefault, opt);\n        onError(undefined, opt);\n    }, onError);\n};\n\nlocal.testCase_onErrorThrow_err = function (opt, onError) {\n/*\n * this function will test onErrorThrow's err handling-behavior\n */\n    local.tryCatchOnError(function () {\n        local.onErrorThrow(local.errorDefault);\n    }, function (err) {\n        // handle err\n        local.assertOrThrow(err, err);\n        onError(undefined, opt);\n    });\n};\n\nlocal.testCase_onErrorWithStack_toString = function (opt, onError) {\n/*\n * this function will test onErrorWithStack's toString handling-behavior\n */\n    local.assertJsonEqual(\n        String(local.onErrorWithStack(local.nop)),\n        String(local.nop)\n    );\n    onError(undefined, opt);\n};\n\nlocal.testCase_onFileModifiedRestart_watchFile = function (opt, onError) {\n/*\n * this function will test onFileModifiedRestart's watchFile handling-behavior\n */\n    let onParallel;\n    if (local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    onParallel = local.onParallel(onError);\n    onParallel.cnt += 1;\n    local.fs.stat(__filename, function (err, stat) {\n        // test default watchFile handling-behavior\n        onParallel.cnt += 1;\n        local.fs.utimes(__filename, stat.atime, new Date(), onParallel);\n        // test nop watchFile handling-behavior\n        onParallel.cnt += 1;\n        setTimeout(function () {\n            local.fs.utimes(__filename, stat.atime, stat.mtime, onParallel);\n        }, 1000);\n        onParallel(err, opt);\n    });\n};\n\nlocal.testCase_onNext_err = function (opt, onError) {\n/*\n * this function will test gotoNext's err handling-behavior\n */\n\n    opt = {};\n    opt.modeDebug = true;\n    local.gotoNext(opt, function () {\n        throw local.errorDefault;\n    });\n    opt.gotoState = 0;\n    local.tryCatchOnError(function () {\n        opt.gotoNext();\n    }, function (err) {\n        // handle err\n        local.assertOrThrow(err, err);\n        onError(undefined, opt);\n    });\n};\n\nlocal.testCase_onParallelList_default = function (opt, onError) {\n/*\n * this function will test onParallelList's default handling-behavior\n */\n    opt = {};\n    local.gotoNext(opt, function (err) {\n        switch (opt.gotoState) {\n        case 1:\n            // test null-case handling-behavior\n            local.onParallelList({}, local.onErrorThrow, opt.gotoNext);\n            break;\n        case 2:\n            opt.list = [\n                null\n            ];\n            // test retryLimit handling-behavior\n            opt.retryLimit = 1;\n            local.onParallelList(opt, function (opt2, onParallel) {\n                onParallel.cnt += 1;\n                // test err handling-behavior\n                onParallel(local.errorDefault, opt2);\n                // test multiple-callback handling-behavior\n                setTimeout(onParallel, 5000);\n            }, function (err) {\n                // handle err\n                local.assertOrThrow(err, err);\n                opt.gotoNext();\n            });\n            break;\n        case 3:\n            opt.data = [];\n            // test rateLimit handling-behavior\n            opt.rateLimit = 3;\n            opt.rateMax = 0;\n            // test retryLimit handling-behavior\n            opt.retryLimit = 1;\n            local.onParallelList({\n                list: [\n                    1, 2, 3, 4\n                ],\n                rateLimit: opt.rateLimit\n            }, function (opt2, onParallel) {\n                onParallel.cnt += 1;\n                opt.rateMax = Math.max(\n                    onParallel.cnt - 1,\n                    opt.rateMax\n                );\n                // test async handling-behavior\n                setTimeout(function () {\n                    // test list-growth handling-behavior\n                    if (opt2.ii === 3) {\n                        opt2.list.push(5);\n                    }\n                    opt.data[opt2.ii] = opt2.elem;\n                    // test retry handling-behavior\n                    local.assertOrThrow(opt2.retry < 1);\n                    onParallel(null, opt2);\n                });\n            }, opt.gotoNext, opt.rateLimit);\n            break;\n        case 4:\n            // validate data\n            local.assertJsonEqual(opt.data, [\n                1, 2, 3, 4, 5\n            ]);\n            local.assertJsonEqual(opt.rateMax, 3);\n            opt.data = [];\n            opt.rateLimit = \"syntax-err\";\n            opt.rateMax = 0;\n            local.onParallelList({\n                list: [\n                    1, 2, 3, 4, 5\n                ],\n                rateLimit: opt.rateLimit\n            }, function (opt2, onParallel) {\n                // test sync handling-behavior\n                onParallel.cnt += 1;\n                opt.rateMax = Math.max(onParallel.cnt, opt.rateMax);\n                opt.data[opt2.ii] = opt2.elem;\n                onParallel(null, opt);\n            }, opt.gotoNext);\n            break;\n        case 5:\n            // validate data\n            local.assertJsonEqual(opt.data, [\n                1, 2, 3, 4, 5\n            ]);\n            local.assertJsonEqual(opt.rateMax, 2);\n            opt.gotoNext();\n            break;\n        default:\n            onError(err, opt);\n        }\n    });\n    opt.gotoState = 0;\n    opt.gotoNext();\n};\n\nlocal.testCase_onParallel_default = function (opt, onError) {\n/*\n * this function will test onParallel's default handling-behavior\n */\n    let onParallel;\n    let onParallelError;\n    // test onEach handling-behavior\n    onParallel = local.onParallel(onError, function () {\n        // validate cnt\n        local.assertOrThrow(onParallel.cnt >= 0, onParallel);\n    });\n    onParallel.cnt += 1;\n    // test multiple-task handling-behavior\n    onParallel.cnt += 1;\n    setTimeout(function () {\n        onParallelError = local.onParallel(onParallel);\n        onParallelError.cnt += 1;\n        onParallelError();\n        // test multiple-callback-error handling-behavior\n        onParallelError();\n        // handle err\n        local.assertOrThrow(onParallelError.err, onParallelError.err);\n        // test err handling-behavior\n        onParallelError(local.errorDefault);\n        // handle err\n        local.assertOrThrow(onParallelError.err, onParallelError.err);\n        // test ignore-after-error handling-behavior\n        onParallelError();\n    });\n    // test default handling-behavior\n    onParallel(null, opt);\n};\n\nlocal.testCase_replStart_default = function (opt, onError) {\n/*\n * this function will test replStart's default handling-behavior\n */\n    if (local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    local.replStart();\n    // hack-coverage - test replStart's muliple-call handling-behavior\n    local.replStart();\n    local.testMock([\n        [\n            local.child_process, {\n                spawn: function () {\n                    return {\n                        on: function (evt, callback) {\n                            callback(null, evt);\n                        }\n                    };\n                }\n            }\n        ],\n        // suppress process.stdout\n        [\n            process.stdout, {\n                write: local.nop\n            }\n        ]\n    ], function (onError) {\n        [\n            // test null-case handling-behavior\n            \"\",\n            // test shell handling-behavior\n            \"$ :\\n\",\n            // test git diff handling-behavior\n            \"$ git diff\\n\",\n            // test git log handling-behavior\n            \"$ git log\\n\",\n            // test charCode handling-behavior\n            \"charCode abcd\\n\",\n            // test charSort handling-behavior\n            \"charSort abcd\\n\",\n            // test grep handling-behavior\n            \"grep \\\\baa\\\\b\\n\",\n            // test keys handling-behavior\n            \"keys {}\\n\",\n            // test print handling-behavior\n            \"print abcd\\n\",\n            // test err handling-behavior\n            \"undefined()\\n\"\n        ].forEach(function (script) {\n            globalThis.utility2_repl1.eval(script, null, \"repl\", local.nop);\n        });\n        onError(undefined, opt);\n    }, onError);\n};\n\nlocal.testCase_requireReadme_start = function (opt, onError) {\n/*\n * this function will test requireReadme's start handling-behavior\n */\n    if (local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    local.testMock([\n        [\n            local, {\n                assetsDict: {},\n                onFileModifiedRestart: local.nop\n            }\n        ], [\n            local.env, {\n                npm_config_mode_start: \"1\",\n                npm_package_nameLib: \"_testCase_requireReadme_start\"\n            }\n        ], [\n            local.fs, {\n                readFile: function (file, opt, onError) {\n                    onError(undefined, \"{}\", file, opt);\n                },\n                readdirSync: function () {\n                    // test jslintAndPrint.conditional handling-behavior\n                    return [\n                        \"aa.css\",\n                        \"aa.html\",\n                        \"aa.js\",\n                        \"aa.json\",\n                        \"aa.rollup.js\",\n                        \"assets.swgg.swagger.json\"\n                    ];\n                }\n            }\n        ]\n    ], function (onError) {\n        // validate data\n        local.requireReadme();\n        local.assertOrThrow(local._testCase_requireReadme_start === local);\n        onError(undefined, opt);\n    }, onError);\n};\n\nlocal.testCase_serverRespondTimeoutDefault_timeout = function (\n    opt,\n    onError\n) {\n/*\n * this function will test\n * serverRespondTimeoutDefault's timeout handling-behavior\n */\n    opt = function (fnc1, fnc2) {\n        [\n            fnc1, fnc2\n        ].forEach(function (fnc) {\n            if (typeof fnc === \"function\") {\n                fnc();\n            }\n        });\n    };\n    local.testMock([\n        [\n            local, {\n                onTimeout: opt,\n                serverRespondDefault: local.nop,\n                setTimeout: opt\n            }\n        ]\n    ], function (onError) {\n        local.serverRespondTimeoutDefault({\n            headers: {}\n        }, {\n            on: opt\n        });\n        onError(undefined, opt);\n    }, onError);\n};\n\nlocal.testCase_setTimeoutOnError_default = function (opt, onError) {\n/*\n * this function will test setTimeoutOnError's default handling-behavior\n */\n    // test null-case handling-behavior\n    local.assertJsonEqual(local.setTimeoutOnError(), undefined);\n    // test onError handling-behavior\n    local.assertJsonEqual(\n        local.setTimeoutOnError(onError, 0, null, {}, opt),\n        {}\n    );\n};\n\nlocal.testCase_stringHtmlSafe_default = function (opt, onError) {\n/*\n * this function will test stringHtmlSafe's default handling-behavior\n */\n    local.assertJsonEqual(\n        local.stringHtmlSafe(\n            local.stringHtmlSafe(local.stringCharsetAscii).slice(32, -1)\n        ),\n        (\n            \" !&quot;#$%&amp;&apos;()*+,-./0123456789:;&lt;=&gt;?@\"\n            + \"ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\"\n        )\n    );\n    onError(undefined, opt);\n};\n\nlocal.testCase_stringQuotedToAscii_default = function (opt, onError) {\n/*\n * this function will test stringQuotedToAscii's default handling-behavior\n */\n    local.assertJsonEqual(\n        local.stringQuotedToAscii(local.stringHelloEmoji),\n        \"hello \\\\ud83d\\\\ude01\\n\"\n    );\n    onError(undefined, opt);\n};\n\nlocal.testCase_stringRegexpEscape_default = function (opt, onError) {\n/*\n * this function will test stringRegexpEscape's default handling-behavior\n */\n    local.assertJsonEqual(\n        local.stringRegexpEscape(local.stringCharsetAscii),\n        (\n            \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\"\n            + \"\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\"\n            + \"\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\"\n            + \"\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f\"\n            + \" !\\\"#\\\\$%&'\\\\(\\\\)\\\\*\\\\+,\\\\-\\\\.\\\\/0123456789:;<=>\\\\?@\"\n            + \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\\[\\\\\\\\\\\\]\\\\^_`\"\n            + \"abcdefghijklmnopqrstuvwxyz\\\\{\\\\|\\\\}~\"\n            + \"\\u007f\"\n        )\n    );\n    onError(undefined, opt);\n};\n\nlocal.testCase_templateRender_default = function (opt, onError) {\n/*\n * this function will test templateRender's default handling-behavior\n */\n    // test null-case handling-behavior\n    local.assertJsonEqual(local.templateRender(), \"\");\n    // test undefined-value handling-behavior\n    local.assertJsonEqual(local.templateRender(\"{{aa}}\", {}), \"{{aa}}\");\n    // test basic handling-behavior\n    local.assertJsonEqual(local.templateRender(\"{{aa}}\", {\n        aa: \"```<aa\\nbb>```\"\n    }), \"```&lt;aa\\nbb&gt;```\");\n    // test markdownToHtml handling-behavior\n    local.assertJsonEqual(\n        local.templateRender(\"{{aa markdownToHtml}}\", {\n            aa: local.stringCharsetAscii.slice(32, -1)\n        }),\n        (\n            \"<p> !&quot;#$%&amp;&apos;()*+,-./0123456789:;&lt;=&gt;?@\"\n            + \"ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~\"\n            + \"</p>\\n\"\n        )\n    );\n    // test markdownSafe handling-behavior\n    local.assertJsonEqual(\n        local.templateRender(\"{{aa markdownSafe notHtmlSafe}}\", {\n            aa: local.stringCharsetAscii.slice(32, -1)\n        }),\n        (\n            \" !\\\"#$%&'()*+,-./0123456789:;<=>?@\"\n            + \"ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_'abcdefghijklmnopqrstuvwxyz{|}~\"\n        )\n    );\n    // test notHtmlSafe handling-behavior\n    local.assertJsonEqual(local.templateRender(\"{{aa notHtmlSafe}}\", {\n        aa: \"```<aa\\nbb>```\"\n    }), \"```<aa\\nbb>```\");\n    // test default handling-behavior\n    local.assertJsonEqual(local.templateRender((\n        \"{{aa alphanumeric}} \"\n        + \"{{aa truncate 4 truncate 4}} \"\n        + \"{{aa jsonStringify jsonStringify4 decodeURIComponent\"\n        + \" encodeURIComponent trim}} \"\n        + \"{{bb}} {{cc}} {{dd}} {{ee.ff}}\"\n    ), {\n        // test string value handling-behavior\n        aa: \"`<aa>`\",\n        // test non-string value handling-behavior\n        bb: 1,\n        // test null-value handling-behavior\n        cc: null,\n        // test undefined-value handling-behavior\n        dd: undefined,\n        // test nested value handling-behavior\n        ee: {\n            ff: \"gg\"\n        }\n    }), \"__aa__ `... %22%5C%22%60%3Caa%3E%60%5C%22%22 1 null {{dd}} gg\");\n    // test partial handling-behavior\n    local.assertJsonEqual(\n        local.templateRender((\n            \"{{#undefined aa}}\\n\"\n            + \"list1{{#each list1}}\\n\"\n            + \"    aa - {{aa}}\\n\"\n            + \"    list2{{#eachTrimEndComma list2}}\\n\"\n            + \"        {{#this/ notHtmlSafe jsonStringify}}\\n\"\n            + \"        bb - {{bb}}\\n\"\n            + \"        {{#if bb}}\\n\"\n            + \"        if\\n\"\n            + \"        {{#unless bb}}\\n\"\n            + \"        else\\n\"\n            + \"        {{/if bb}}\\n\"\n            + \"        {{#unless bb}}\\n\"\n            + \"        unless\\n\"\n            + \"        {{/unless bb}}\\n\"\n            + \"        ,\\n\"\n            + \"    {{/eachTrimEndComma list2}}\\n\"\n            + \"{{/each list1}}\\n\"\n            + \"{{/undefined aa}}\\n\"\n        ), {\n            list1: [\n                // test null-value handling-behavior\n                null, {\n                    aa: \"aa\",\n                    // test recursive-list handling-behavior\n                    list2: [\n                        {\n                            bb: \"bb\"\n                        }, {\n                            bb: null\n                        }\n                    ]\n                }\n            ]\n        }),\n        (\n            \"{{#undefined aa}}\\n\"\n            + \"list1\\n\"\n            + \"    aa - {{aa}}\\n\"\n            + \"    list2\\n\"\n            + \"\\n\"\n            + \"    aa - aa\\n\"\n            + \"    list2\\n\"\n            + \"        {\\\"bb\\\":\\\"bb\\\"}\\n\"\n            + \"        bb - bb\\n\"\n            + \"        \\n\"\n            + \"        if\\n\"\n            + \"        \\n\"\n            + \"        \\n\"\n            + \"        ,\\n\"\n            + \"    \\n\"\n            + \"        {\\\"bb\\\":null}\\n\"\n            + \"        bb - null\\n\"\n            + \"        \\n\"\n            + \"        else\\n\"\n            + \"        \\n\"\n            + \"        \\n\"\n            + \"        unless\\n\"\n            + \"        \\n\"\n            + \"        \\n\"\n            + \"\\n\"\n            + \"{{/undefined aa}}\\n\"\n        )\n    );\n    // test err handling-behavior\n    local.tryCatchOnError(function () {\n        local.templateRender(\"{{aa bb}}\", {\n            aa: 1\n        });\n    }, local.nop);\n    // handle err\n    local.assertOrThrow(local._debugTryCatchError, local._debugTryCatchError);\n    onError(undefined, opt);\n};\n\nlocal.testCase_testReportCreate_default = function (opt, onError) {\n/*\n * this function will test testReport's default handling-behavior\n */\n    if (local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    local.testMock([], function (onError) {\n        // test null-case handling-behavior\n        local.testReportCreate();\n        // test testsFailed handling-behavior\n        local.testReportCreate({\n            testPlatformList: [\n                {\n                    testCaseList: [\n                        {\n                            status: \"failed\"\n                        }, {\n                            status: \"passed\"\n                        }\n                    ]\n                }\n            ]\n        });\n        onError(undefined, opt);\n    }, onError);\n};\n\nlocal.testCase_throwError_default = function (opt, onError) {\n/*\n * this function will test throwError's default handling-behavior\n */\n    local.tryCatchOnError(function () {\n        local.throwError();\n    }, function (err) {\n        // handle err\n        local.assertOrThrow(err, err);\n        onError(undefined, opt);\n    });\n};\n\nlocal.testCase_uiAnimateXxx_default = function (opt, onError) {\n/*\n * this function will test uiAnimateXxx's default handling-behavior\n */\n    if (!local.isBrowser) {\n        onError(undefined, opt);\n        return;\n    }\n    opt = document.createElement(\"div\");\n    // test uiAnimateSlideXxx handling-behavior\n    local.uiAnimateSlideDown();\n    local.uiAnimateSlideUp();\n    opt.classList.add(\"uiAnimateSlide\");\n    local.uiAnimateSlideDown(opt);\n    local.assertOrThrow(\n        opt.style.maxHeight.indexOf(\"px\") >= 0,\n        opt.style.maxHeight\n    );\n    local.uiAnimateSlideUp(opt);\n    local.assertJsonEqual(opt.style.maxHeight, \"0px\");\n    // test uiAnimateSlideAccordian handling-behavior\n    local.uiAnimateSlideAccordian(\n        opt,\n        [\n            opt, document.createElement(\"div\")\n        ]\n    );\n    onError(undefined, opt);\n};\n\nlocal.testCase_urlJoin_default = function (opt, onError) {\n/*\n * this function will test urlJoin's default handling-behavior\n */\n    local.assertJsonEqual(local.urlJoin(\"\", \"\"), \"/\");\n    local.assertJsonEqual(local.urlJoin(\"http://aa/bb\", \"zz\"), \"http://aa/zz\");\n    local.assertJsonEqual(\n        local.urlJoin(\"http://aa/bb/\", \"zz\"),\n        \"http://aa/bb/zz\"\n    );\n    local.assertJsonEqual(\n        local.urlJoin(\"http://aa/bb/\", \"/zz\"),\n        \"http://aa/zz\"\n    );\n    local.assertJsonEqual(local.urlJoin(\"http://aa/bb/\", \"//zz\"), \"http://zz\");\n    local.assertJsonEqual(\n        local.urlJoin(\"http://aa/bb/\", \"http://zz\"),\n        \"http://zz\"\n    );\n    onError(undefined, opt);\n};\n\nlocal.testCase_urlParse_default = function (opt, onError) {\n/*\n * this function will test urlParse's default handling-behavior\n */\n    local.testMock([\n        [\n            local, {\n                // test default PORT handling-behavior\n                env: {},\n                // test init-serverLocalHost handling-behavior\n                serverLocalHost: \"\"\n            }\n        ]\n    ], function (onError) {\n        // test default handling-behavior\n        local.assertJsonEqual(local.urlParse(\n            \"https://127.0.0.1:80/foo/bar?aa=1&bb%20cc=dd%20=ee&aa=2&aa#zz=1\"\n        ), {\n            basename: \"bar\",\n            hash: \"#zz=1\",\n            host: \"127.0.0.1:80\",\n            hostname: \"127.0.0.1\",\n            href: (\n                \"https://127.0.0.1:80/foo/bar\"\n                + \"?aa=1&bb%20cc=dd%20=ee&aa=2&aa#zz=1\"\n            ),\n            path: \"/foo/bar?aa=1&bb%20cc=dd%20=ee&aa=2&aa\",\n            pathname: \"/foo/bar\",\n            port: \"80\",\n            protocol: \"https:\",\n            query: {\n                aa: [\n                    \"1\", \"2\", \"\"\n                ],\n                \"bb cc\": \"dd =ee\"\n            },\n            search: \"?aa=1&bb%20cc=dd%20=ee&aa=2&aa\"\n        });\n        // test err handling-behavior\n        local.assertJsonEqual(local.urlParse(null), {\n            basename: \"\",\n            hash: \"\",\n            host: \"\",\n            hostname: \"\",\n            href: \"\",\n            path: \"\",\n            pathname: \"\",\n            port: \"\",\n            protocol: \"\",\n            query: {},\n            search: \"\"\n        });\n        onError(undefined, opt);\n    }, onError);\n};\n\nlocal.testCase_uuid4Create_default = function (opt, onError) {\n/*\n * this function will test uuid4Create's default handling-behavior\n */\n    local.assertOrThrow(\n        local.regexpValidateUuid.test(local.uuid4Create()),\n        local.uuid4Create()\n    );\n    onError(undefined, opt);\n};\n\nlocal.testCase_webpage_err = function (opt, onError) {\n/*\n * this function will test webpage's err handling-behavior\n */\n    if (!local.isBrowser) {\n        local.browserTest({\n            modeSilent: true,\n            url: (\n                local.serverLocalHost\n                + \"?modeTest=1\"\n                + \"&modeTestCase=testCase_webpage_err\"\n            )\n        }, function (err) {\n            onError(undefined, err);\n        });\n        return;\n    }\n    if (local.modeTestCase !== \"testCase_webpage_err\") {\n        onError();\n        return;\n    }\n    // ignore err in coverage-case\n    globalThis.utility2_testReport.testPlatformList[0].testCaseList = [];\n    globalThis.utility2_testReport.testsPending = 0;\n    setTimeout(function () {\n        // test err from callback handling-behavior\n        onError(local.errorDefault, opt);\n        // test err from multiple-callback handling-behavior\n        onError(undefined, opt);\n    }, 2000);\n    // test uncaught-err handling-behavior\n    setTimeout(local.throwError);\n};\n\nlocal.utility2.serverLocalUrlTest = function (url) {\n/*\n * this function will test if <url> is local\n */\n    url = local.urlParse(url).pathname;\n    return local.isBrowser && !local.env.npm_config_mode_backend && (\n        /^\\/test\\./\n    ).test(url);\n};\n}());\n\n\n\n// run shared js-env code - init-after\n(function () {\n// hack-coverage - test testRunServer's multiple-call handling-behavior\nlocal.testRunServer(local);\n// hack-coverage - stateInit\nlocal.stateInit({});\n// init test-middleware\nlocal.middlewareList.push(function (req, res, next) {\n/*\n * this function will run test-middleware\n */\n    switch (req.urlParsed.pathname) {\n    // test http POST handling-behavior\n    case \"/test.body\":\n        // test req-body-read handling-behavior\n        local.middlewareBodyRead(req, res, function () {\n            // test multiple req-body-read handling-behavior\n            local.middlewareBodyRead(req, res, function () {\n                res.write(req.bodyRaw);\n                res.end();\n            });\n        });\n        break;\n    // test http POST handling-behavior\n    case \"/test.echo\":\n        // test res-header handling-behavior\n        local.serverRespondHeadSet(req, res, null, {\n            \"X-Res-Header-Test\": \"bb\"\n        });\n        local.serverRespondEcho(req, res);\n        break;\n    // test 500-internal-server-error handling-behavior\n    case \"/test.err-500\":\n        // test multiple-callback serverRespondHeadSet handling-behavior\n        local.serverRespondHeadSet(req, res, null, {});\n        next(local.errorDefault);\n        // test multiple-callback-error handling-behavior\n        next(local.errorDefault);\n        // test onErrorDefault handling-behavior\n        local.testMock([\n            [\n                local, {\n                    swgg: null\n                }\n            ]\n        ], function (onError) {\n            let err;\n            err = new Error(\"error\");\n            err.statusCode = 500;\n            local.middlewareError(err, req, res);\n            onError();\n        }, local.onErrorThrow);\n        break;\n    // test undefined-status-code handling-behavior\n    case \"/test.err-undefined\":\n        local.serverRespondDefault(req, res, 999);\n        break;\n    // test timeout handling-behavior\n    case \"/test.timeout\":\n        setTimeout(function () {\n            res.end();\n        }, 2000);\n        break;\n    // serve file\n    default:\n        local.middlewareFileServer(req, res, next);\n    }\n});\n}());\n\n\n\n// run node js-env code - init-after\n/* istanbul ignore next */\n(function () {\nif (local.isBrowser) {\n    return;\n}\n\n\n\n(function () {\n    switch (local.env.HEROKU_APP_NAME) {\n    case \"h1-cron1\":\n        // heroku-keepalive\n        setInterval(function () {\n            local.ajax({\n                url: \"https://h1-cron1.herokuapp.com\"\n            }, local.onErrorThrow);\n        }, 5 * 60 * 1000);\n        local.cronJob = local.nop;\n        // update cron\n        local.ajax({\n            url: \"https://kaizhu256.github.io/node-utility2/cronJob.js\"\n        }, function (err, xhr) {\n            if (!err && xhr.responseText !== local.cronScript) {\n                local.cronScript = xhr.responseText;\n                local.vm.runInThisContext(local.cronScript);\n            }\n        });\n        setInterval(function () {\n            let cronTime;\n            cronTime = new Date();\n            if (\n                cronTime.toISOString().slice(0, 16)\n                < (local.cronTime && local.cronTime.toISOString())\n            ) {\n                return;\n            }\n            local.cronTime = cronTime;\n            // cron every 5 minutes\n            if (local.cronTime.getUTCMinutes() % 5 === 0) {\n                // update cron\n                local.ajax({\n                    url: \"https://kaizhu256.github.io/node-utility2/cronJob.js\"\n                }, function (err, xhr) {\n                    if (!err && xhr.responseText !== local.cronScript) {\n                        local.cronScript = xhr.responseText;\n                        local.vm.runInThisContext(local.cronScript);\n                    }\n                });\n            }\n            local.cronJob();\n        }, 30000);\n        break;\n    case \"h1-proxy1\":\n        // heroku-keepalive\n        setInterval(function () {\n            local.ajax({\n                url: \"https://h1-proxy1.herokuapp.com\"\n            }, local.onErrorThrow);\n        }, 5 * 60 * 1000);\n        break;\n    }\n}());\n\n\n\n// init cli\nif (module !== require.main || globalThis.utility2_rollup) {\n    return;\n}\nlocal.assetsDict[\"/assets.script_only.html\"] = (\n    \"<h1>script_only_test</h1>\\n\"\n    + \"<script src=\\\"assets.utility2.js\\\"></script>\\n\"\n    + \"<script>window.utility2_onReadyBefore.cnt += 1;</script>\\n\"\n    + \"<script src=\\\"assets.example.js\\\"></script>\\n\"\n    + \"<script src=\\\"assets.test.js\\\"></script>\\n\"\n    + \"<script>window.utility2_onReadyBefore();</script>\\n\"\n);\nif (process.argv[2]) {\n    // start with coverage\n    if (local.env.npm_config_mode_coverage) {\n        process.argv.splice(1, 1, __dirname + \"/lib.istanbul.js\", \"cover\");\n        local.istanbul.cliDict[process.argv[2]]();\n        return;\n    }\n    // start\n    process.argv.splice(1, 1);\n    process.argv[1] = local.path.resolve(process.argv[1]);\n    local.Module.runMain();\n}\n// runme\nif (local.env.npm_config_runme) {\n    require(local.path.resolve(local.env.npm_config_runme));\n}\n}());\n}());\n","/index.rollup.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<!-- \"assets.utility2.template.html\" -->\n<title>utility2 (2020.5.31)</title>\n<style>\n/* jslint utility2:true */\n/*csslint\n*/\n/* csslint ignore:start */\n*,\n*:after,\n*:before {\n    box-sizing: border-box;\n}\n.uiAnimateSlide {\n    overflow-y: hidden;\n    transition: max-height ease-in 250ms, min-height ease-in 250ms, padding-bottom ease-in 250ms, padding-top ease-in 250ms;\n}\n/* csslint ignore:end */\n@keyframes uiAnimateSpin {\n0% {\n    transform: rotate(0deg);\n}\n100% {\n    transform: rotate(360deg);\n}\n}\na {\n    overflow-wrap: break-word;\n}\nbody {\n    background: #f7f7f7;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: small;\n    margin: 0 40px;\n}\nbody > div,\nbody > input,\nbody > pre,\nbody > .button,\nbody > .textarea {\n    margin-bottom: 20px;\n    margin-top: 0;\n}\nbody > input,\nbody > .button {\n    width: 20rem;\n}\nbody > .readonly {\n    background: #ddd;\n}\nbody > .textarea {\n    height: 10rem;\n    resize: vertical;\n    width: 100%;\n}\ncode,\npre,\n.textarea {\n    font-family: Consolas, Menlo, monospace;\n    font-size: smaller;\n}\npre {\n    overflow-wrap: break-word;\n    white-space: pre-wrap;\n}\n.button {\n    background: #ddd;\n    border: 1px solid #999;\n    color: #000;\n    cursor: pointer;\n    display: inline-block;\n    padding: 2px 5px;\n    text-align: center;\n    text-decoration: none;\n}\n.button:hover {\n    background: #bbb;\n}\n.colorError {\n    color: #d00;\n}\n.textarea {\n    background: #fff;\n    border: 1px solid #999;\n    border-radius: 0;\n    cursor: auto;\n    overflow: auto;\n    padding: 2px;\n}\n.zeroPixel {\n    border: 0;\n    height: 0;\n    margin: 0;\n    padding: 0;\n    width: 0;\n}\n</style>\n</head>\n<body>\n<div class=\"uiAnimateSpin\" style=\"animation: uiAnimateSpin 2s linear infinite; border: 5px solid #999; border-radius: 50%; border-top: 5px solid #7d7; display: none; height: 25px; vertical-align: middle; width: 25px;\"></div>\n<script>\n/* jslint utility2:true */\n// init domOnEventWindowOnloadTimeElapsed\n(function () {\n/*\n * this function will measure and print time-elapsed for window.onload\n */\n    \"use strict\";\n    if (!(\n        typeof window === \"object\" && window && window.document\n        && typeof document.addEventListener === \"function\"\n    ) || window.domOnEventWindowOnloadTimeElapsed) {\n        return;\n    }\n    window.domOnEventWindowOnloadTimeElapsed = Date.now() + 100;\n    window.addEventListener(\"load\", function () {\n        setTimeout(function () {\n            window.domOnEventWindowOnloadTimeElapsed = (\n                Date.now()\n                - window.domOnEventWindowOnloadTimeElapsed\n            );\n            console.error(\n                \"domOnEventWindowOnloadTimeElapsed = \"\n                + window.domOnEventWindowOnloadTimeElapsed\n            );\n        }, 100);\n    });\n}());\n\n\n\n// init domOnEventAjaxProgressUpdate\n(function () {\n/*\n * this function will display incrementing ajax-progress-bar\n */\n    \"use strict\";\n    let opt;\n    let styleBar0;\n    let styleBar;\n    let styleModal0;\n    let styleModal;\n    let timeStart;\n    let timerInterval;\n    let timerTimeout;\n    let tmp;\n    let width;\n    try {\n        if (\n            window.domOnEventAjaxProgressUpdate\n            || !document.getElementById(\"domElementAjaxProgressBar1\").style\n        ) {\n            return;\n        }\n    } catch (ignore) {\n        return;\n    }\n    window.domOnEventAjaxProgressUpdate = function (gotoState, onError) {\n        gotoState = (gotoState | 0) + 1;\n        switch (gotoState) {\n        // ajaxProgress - show\n        case 1:\n            // init timerInterval and timerTimeout\n            if (!timerTimeout) {\n                timeStart = Date.now();\n                timerInterval = setInterval(opt, 2000, 1, onError);\n                timerTimeout = setTimeout(opt, opt.timeout, 2, onError);\n            }\n            // show ajaxProgressBar\n            if (width !== -1) {\n                styleBar.background = styleBar0.background;\n            }\n            setTimeout(opt, 50, gotoState, onError);\n            break;\n        // ajaxProgress - increment\n        case 2:\n            // show ajaxProgressBar\n            if (width === -1) {\n                break;\n            }\n            styleBar.background = styleBar0.background;\n            // reset ajaxProgress if it reaches end\n            if ((styleBar.width.slice(0, -1) | 0) > 95) {\n                width = 0;\n            }\n            // this algorithm will indefinitely increment ajaxProgress\n            // with successively smaller increments without reaching 100%\n            width += 1;\n            styleBar.width = Math.max(\n                100 - 75 * Math.exp(-0.125 * width),\n                styleBar.width.slice(0, -1) | 0\n            ) + \"%\";\n            // show ajaxProgressModal\n            styleModal.height = \"100%\";\n            styleModal.opacity = styleModal0.opacity;\n            if (!opt.cnt) {\n                setTimeout(opt, 0, gotoState, onError);\n            }\n            break;\n        // ajaxProgress - 100%\n        case 3:\n            width = -1;\n            styleBar.width = \"100%\";\n            setTimeout(opt, 1000, gotoState, onError);\n            break;\n        // ajaxProgress - hide\n        case 4:\n            // debug timeElapsed\n            tmp = Date.now();\n            console.error(\n                \"domOnEventAjaxProgressUpdate - timeElapsed - \"\n                + (tmp - timeStart)\n                + \" ms\"\n            );\n            // cleanup timerInterval and timerTimeout\n            timeStart = tmp;\n            clearInterval(timerInterval);\n            timerInterval = undefined;\n            clearTimeout(timerTimeout);\n            timerTimeout = undefined;\n            // hide ajaxProgressBar\n            styleBar.background = \"transparent\";\n            // hide ajaxProgressModal\n            styleModal.opacity = \"0\";\n            if (onError) {\n                onError();\n            }\n            setTimeout(opt, 250, gotoState);\n            break;\n        // ajaxProgress - reset\n        default:\n            opt.cnt = 0;\n            width = 0;\n            styleBar.width = \"0%\";\n            styleModal.height = \"0\";\n        }\n    };\n    opt = window.domOnEventAjaxProgressUpdate;\n    opt.end = function (onError) {\n        opt.cnt = 0;\n        window.domOnEventAjaxProgressUpdate(2, onError);\n    };\n    // init styleBar\n    styleBar = document.getElementById(\"domElementAjaxProgressBar1\").style;\n    styleBar0 = Object.assign({}, styleBar);\n    Object.entries({\n        background: \"#d00\",\n        height: \"2px\",\n        left: \"0\",\n        margin: \"0\",\n        padding: \"0\",\n        position: \"fixed\",\n        top: \"0\",\n        transition: \"background 250ms, width 750ms\",\n        width: \"0%\",\n        \"z-index\": \"1\"\n    }).forEach(function (entry) {\n        styleBar[entry[0]] = styleBar[entry[0]] || entry[1];\n    });\n    // init styleModal\n    styleModal = document.getElementById(\"domElementAjaxProgressModal1\") || {};\n    styleModal = styleModal.style || {};\n    styleModal0 = Object.assign({}, styleModal);\n    Object.entries({\n        height: \"0\",\n        left: \"0\",\n        margin: \"0\",\n        padding: \"0\",\n        position: \"fixed\",\n        top: \"0\",\n        transition: \"opacity 125ms\",\n        width: \"100%\",\n        \"z-index\": \"1\"\n    }).forEach(function (entry) {\n        styleModal[entry[0]] = styleModal[entry[0]] || entry[1];\n    });\n    // init state\n    width = 0;\n    opt.cnt = 0;\n    opt.timeout = 30000;\n    // init ajaxProgress\n    window.domOnEventAjaxProgressUpdate();\n}());\n\n\n\n// init domOnEventDelegateDict\n(function () {\n/*\n * this function will handle delegated dom-evt\n */\n    \"use strict\";\n    let debounce;\n    let timerTimeout;\n    debounce = function () {\n        return setTimeout(function () {\n            timerTimeout = undefined;\n        }, 30);\n    };\n    if (!(\n        typeof window === \"object\" && window && window.document\n        && typeof document.addEventListener === \"function\"\n    ) || window.domOnEventDelegateDict) {\n        return;\n    }\n    window.domOnEventDelegateDict = {};\n    window.domOnEventDelegateDict.domOnEventDelegate = function (evt) {\n        evt.targetOnEvent = evt.target.closest(\"[data-onevent]\");\n        if (\n            !evt.targetOnEvent\n            || evt.targetOnEvent.dataset.onevent === \"domOnEventNop\"\n            || evt.target.closest(\".disabled,.readonly\")\n        ) {\n            return;\n        }\n        // filter evt-change\n        switch (evt.type !== \"change\" && evt.target.type) {\n        case \"checkbox\":\n        case \"file\":\n        case \"select-one\":\n        case \"radio\":\n            return;\n        }\n        // filter evt-keyup\n        switch (evt.type) {\n        case \"keyup\":\n            if (!timerTimeout && (\n                evt.target.tagName === \"INPUT\"\n                || evt.target.tagName === \"TEXTAREA\"\n            )) {\n                timerTimeout = debounce();\n                if (evt.target.dataset.valueOld !== evt.target.value) {\n                    evt.target.dataset.valueOld = evt.target.value;\n                    break;\n                }\n            }\n            return;\n        }\n        switch (evt.targetOnEvent.tagName) {\n        case \"BUTTON\":\n        case \"FORM\":\n            evt.preventDefault();\n            break;\n        }\n        evt.stopPropagation();\n        // handle domOnEventClickTarget\n        if (evt.targetOnEvent.dataset.onevent === \"domOnEventClickTarget\") {\n            document.querySelector(\n                evt.targetOnEvent.dataset.clickTarget\n            ).click();\n            return;\n        }\n        window.domOnEventDelegateDict[evt.targetOnEvent.dataset.onevent](evt);\n    };\n    // handle evt\n    [\n        \"change\",\n        \"click\",\n        \"keyup\",\n        \"submit\"\n    ].forEach(function (eventType) {\n        document.addEventListener(\n            eventType,\n            window.domOnEventDelegateDict.domOnEventDelegate\n        );\n    });\n}());\n\n\n\n// init domOnEventSelectAllWithinPre\n(function () {\n/*\n * this function will limit select-all within <pre tabIndex=\"0\"> elem\n * https://stackoverflow.com/questions/985272/selecting-text-in-an-element-akin-to-highlighting-with-your-mouse\n */\n    \"use strict\";\n    if (!(\n        typeof window === \"object\" && window && window.document\n        && typeof document.addEventListener === \"function\"\n    ) || window.domOnEventSelectAllWithinPre) {\n        return;\n    }\n    window.domOnEventSelectAllWithinPre = function (evt) {\n        let range;\n        let selection;\n        if (\n            evt && (evt.ctrlKey || evt.metaKey) && evt.key === \"a\"\n            && evt.target.closest(\"pre\")\n        ) {\n            range = document.createRange();\n            range.selectNodeContents(evt.target.closest(\"pre\"));\n            selection = window.getSelection();\n            selection.removeAllRanges();\n            selection.addRange(range);\n            evt.preventDefault();\n        }\n    };\n    // handle evt\n    document.addEventListener(\n        \"keydown\",\n        window.domOnEventSelectAllWithinPre\n    );\n}());\n</script>\n<h1>\n\n<a\n    \n    href=\"https://github.com/kaizhu256/node-utility2\"\n    \n    target=\"_blank\"\n>\n\n    utility2 (2020.5.31)\n\n</a>\n\n</h1>\n<h3>this zero-dependency package will provide high-level functions to to build, test, and deploy webapps</h3>\n\n<a class=\"button\" download href=\"assets.app.js\">download standalone app</a><br>\n<button class=\"button\" data-onevent=\"testRunBrowser\" id=\"buttonTestRun1\">run browser-tests</button><br>\n<div class=\"uiAnimateSlide\" id=\"htmlTestReport1\" style=\"border-bottom: 0; border-top: 0; margin-bottom: 0; margin-top: 0; max-height: 0; padding-bottom: 0; padding-top: 0;\"></div>\n\n\n\n\n<!-- custom-html-start -->\n<label>edit or paste script below to cover and test</label>\n<textarea class=\"textarea\" data-onevent=\"domOnEventInputChange\" id=\"inputTextarea1\">\n// remove comment below to disable jslint\n/*jslint browser, devel*/\n/*global window*/\n(function () {\n    \"use strict\";\n    var testCaseDict;\n    testCaseDict = {};\n    testCaseDict.modeTest = 1;\n\n    // comment this testCase to disable failed error demo\n    testCaseDict.testCase_failed_error_demo = function (opt, onError) {\n    /*\n     * this function will run a failed error demo\n     */\n        // hack-jslint\n        window.utility2.nop(opt);\n        onError(new Error(\"this is a failed error demo\"));\n    };\n\n    testCaseDict.testCase_passed_ajax_demo = function (opt, onError) {\n    /*\n     * this function will demo a passed ajax test\n     */\n        var data;\n        opt = {url: \"/\"};\n        // test ajax-req for main-page \"/\"\n        window.utility2.ajax(opt, function (err, xhr) {\n            try {\n                // handle err\n                console.assert(!err, err);\n                // validate \"200 ok\" status\n                console.assert(xhr.statusCode === 200, xhr.statusCode);\n                // validate non-empty data\n                data = xhr.responseText;\n                console.assert(data && data.length > 0, data);\n                onError();\n            } catch (errCaught) {\n                onError(errCaught);\n            }\n        });\n    };\n\n    window.utility2.testRunDefault(testCaseDict);\n}());\n</textarea>\n<button class=\"button\" data-onevent=\"domOnEventInputChange\" id=\"buttonJslintAutofix1\">jslint autofix</button><br>\n<pre class= \"colorError\" id=\"outputJslintPre1\" tabindex=\"0\"></pre>\n<label>instrumented-code</label>\n<textarea class=\"readonly textarea\" id=\"outputTextarea1\" readonly tabindex=\"0\"></textarea>\n<label>stderr and stdout</label>\n<textarea class=\"onevent-reset-output readonly textarea\" id=\"outputStdout1\" readonly></textarea>\n<div id=\"htmlTestReport2\"></div>\n<div id=\"htmlCoverageReport1\"></div>\n<script>\n/* jslint utility2:true */\nwindow.addEventListener(\"load\", function (local) {\n\"use strict\";\nlocal = window.utility2;\ndocument.querySelectorAll(\n    \"#buttonTestRun1, #htmlTestReport1\"\n).forEach(function (elem) {\n    elem.style.display = \"none\";\n});\nlocal.domOnEventInputChange = function (evt) {\n    switch (evt.type + \".\" + evt.target.id) {\n    case \"click.buttonJslintAutofix1\":\n    case \"keyup.inputTextarea1\":\n        // jslint #inputTextarea1\n        local.jslintAndPrint(document.querySelector(\n            \"#inputTextarea1\"\n        ).value, \"inputTextarea1.js\", {\n            autofix: evt.target.id === \"buttonJslintAutofix1\",\n            conditional: evt.target.id !== \"buttonJslintAutofix1\"\n        });\n        if (local.jslint.jslintResult.autofix) {\n            document.querySelector(\n                \"#inputTextarea1\"\n            ).value = local.jslint.jslintResult.code;\n        }\n        document.querySelector(\n            \"#outputJslintPre1\"\n        ).textContent = local.jslint.jslintResult.errMsg.replace((\n            /\\u001b\\[\\d*m/g\n        ), \"\").trim();\n        // try to cleanup __coverage__\n        try {\n            delete globalThis.__coverage__[\"/inputTextarea1.js\"];\n        } catch (ignore) {}\n        // try to cover and eval #inputTextarea1\n        try {\n            document.querySelector(\n                \"#outputTextarea1\"\n            ).value = local.istanbul.instrumentSync(\n                document.querySelector(\"#inputTextarea1\").value,\n                \"/inputTextarea1.js\"\n            );\n            eval( // jslint ignore:line\n                document.querySelector(\"#outputTextarea1\").value\n            );\n        } catch (errCaught) {\n            console.error(errCaught);\n        }\n        break;\n    }\n};\n// handle evt\nlocal.on(\"utility2.testRunEnd\", function () {\n    document.querySelector(\n        \"#htmlCoverageReport1\"\n    ).innerHTML = local.istanbul.coverageReportCreate({\n        coverage: globalThis.__coverage__\n    });\n});\nlocal.on(\"utility2.testRunProgressUpdate\", function (testReport) {\n    document.querySelector(\n        \"#htmlTestReport2\"\n    ).innerHTML = local.testReportMerge(testReport, {});\n});\nlocal.domOnEventInputChange({\n    target: {\n        id: \"inputTextarea1\"\n    },\n    type: \"keyup\"\n});\n});\n</script>\n<!-- custom-html-end -->\n\n\n\n\n\n<script src=\"assets.app.js\"></script>\n\n\n<div style=\"text-align: center;\">\n    [\n    this app was created with\n    <a\n        href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\"\n    >utility2</a>\n    ]\n</div>\n</body>\n</html>\n"},"env":{"NODE_ENV":"test","npm_package_description":"this zero-dependency package will provide high-level functions to to build, test, and deploy webapps","npm_package_homepage":"https://github.com/kaizhu256/node-utility2","npm_package_name":"utility2","npm_package_nameLib":"utility2","npm_package_version":"2020.5.31"}}});